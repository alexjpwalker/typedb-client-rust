// This file is generated by rust-protobuf 2.18.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `common/options.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_2;

#[derive(PartialEq,Clone,Default)]
pub struct Options {
    // message oneof groups
    pub infer_opt: ::std::option::Option<Options_oneof_infer_opt>,
    pub trace_inference_opt: ::std::option::Option<Options_oneof_trace_inference_opt>,
    pub explain_opt: ::std::option::Option<Options_oneof_explain_opt>,
    pub parallel_opt: ::std::option::Option<Options_oneof_parallel_opt>,
    pub prefetch_size_opt: ::std::option::Option<Options_oneof_prefetch_size_opt>,
    pub prefetch_opt: ::std::option::Option<Options_oneof_prefetch_opt>,
    pub session_idle_timeout_opt: ::std::option::Option<Options_oneof_session_idle_timeout_opt>,
    pub transaction_timeout_opt: ::std::option::Option<Options_oneof_transaction_timeout_opt>,
    pub schema_lock_acquire_timeout_opt: ::std::option::Option<Options_oneof_schema_lock_acquire_timeout_opt>,
    pub read_any_replica_opt: ::std::option::Option<Options_oneof_read_any_replica_opt>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Options {
    fn default() -> &'a Options {
        <Options as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Options_oneof_infer_opt {
    infer(bool),
}

#[derive(Clone,PartialEq,Debug)]
pub enum Options_oneof_trace_inference_opt {
    trace_inference(bool),
}

#[derive(Clone,PartialEq,Debug)]
pub enum Options_oneof_explain_opt {
    explain(bool),
}

#[derive(Clone,PartialEq,Debug)]
pub enum Options_oneof_parallel_opt {
    parallel(bool),
}

#[derive(Clone,PartialEq,Debug)]
pub enum Options_oneof_prefetch_size_opt {
    prefetch_size(i32),
}

#[derive(Clone,PartialEq,Debug)]
pub enum Options_oneof_prefetch_opt {
    prefetch(bool),
}

#[derive(Clone,PartialEq,Debug)]
pub enum Options_oneof_session_idle_timeout_opt {
    session_idle_timeout_millis(i32),
}

#[derive(Clone,PartialEq,Debug)]
pub enum Options_oneof_transaction_timeout_opt {
    transaction_timeout_millis(i32),
}

#[derive(Clone,PartialEq,Debug)]
pub enum Options_oneof_schema_lock_acquire_timeout_opt {
    schema_lock_acquire_timeout_millis(i32),
}

#[derive(Clone,PartialEq,Debug)]
pub enum Options_oneof_read_any_replica_opt {
    read_any_replica(bool),
}

impl Options {
    pub fn new() -> Options {
        ::std::default::Default::default()
    }

    // bool infer = 1;


    pub fn get_infer(&self) -> bool {
        match self.infer_opt {
            ::std::option::Option::Some(Options_oneof_infer_opt::infer(v)) => v,
            _ => false,
        }
    }
    pub fn clear_infer(&mut self) {
        self.infer_opt = ::std::option::Option::None;
    }

    pub fn has_infer(&self) -> bool {
        match self.infer_opt {
            ::std::option::Option::Some(Options_oneof_infer_opt::infer(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_infer(&mut self, v: bool) {
        self.infer_opt = ::std::option::Option::Some(Options_oneof_infer_opt::infer(v))
    }

    // bool trace_inference = 2;


    pub fn get_trace_inference(&self) -> bool {
        match self.trace_inference_opt {
            ::std::option::Option::Some(Options_oneof_trace_inference_opt::trace_inference(v)) => v,
            _ => false,
        }
    }
    pub fn clear_trace_inference(&mut self) {
        self.trace_inference_opt = ::std::option::Option::None;
    }

    pub fn has_trace_inference(&self) -> bool {
        match self.trace_inference_opt {
            ::std::option::Option::Some(Options_oneof_trace_inference_opt::trace_inference(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_trace_inference(&mut self, v: bool) {
        self.trace_inference_opt = ::std::option::Option::Some(Options_oneof_trace_inference_opt::trace_inference(v))
    }

    // bool explain = 3;


    pub fn get_explain(&self) -> bool {
        match self.explain_opt {
            ::std::option::Option::Some(Options_oneof_explain_opt::explain(v)) => v,
            _ => false,
        }
    }
    pub fn clear_explain(&mut self) {
        self.explain_opt = ::std::option::Option::None;
    }

    pub fn has_explain(&self) -> bool {
        match self.explain_opt {
            ::std::option::Option::Some(Options_oneof_explain_opt::explain(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_explain(&mut self, v: bool) {
        self.explain_opt = ::std::option::Option::Some(Options_oneof_explain_opt::explain(v))
    }

    // bool parallel = 4;


    pub fn get_parallel(&self) -> bool {
        match self.parallel_opt {
            ::std::option::Option::Some(Options_oneof_parallel_opt::parallel(v)) => v,
            _ => false,
        }
    }
    pub fn clear_parallel(&mut self) {
        self.parallel_opt = ::std::option::Option::None;
    }

    pub fn has_parallel(&self) -> bool {
        match self.parallel_opt {
            ::std::option::Option::Some(Options_oneof_parallel_opt::parallel(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_parallel(&mut self, v: bool) {
        self.parallel_opt = ::std::option::Option::Some(Options_oneof_parallel_opt::parallel(v))
    }

    // int32 prefetch_size = 5;


    pub fn get_prefetch_size(&self) -> i32 {
        match self.prefetch_size_opt {
            ::std::option::Option::Some(Options_oneof_prefetch_size_opt::prefetch_size(v)) => v,
            _ => 0,
        }
    }
    pub fn clear_prefetch_size(&mut self) {
        self.prefetch_size_opt = ::std::option::Option::None;
    }

    pub fn has_prefetch_size(&self) -> bool {
        match self.prefetch_size_opt {
            ::std::option::Option::Some(Options_oneof_prefetch_size_opt::prefetch_size(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_prefetch_size(&mut self, v: i32) {
        self.prefetch_size_opt = ::std::option::Option::Some(Options_oneof_prefetch_size_opt::prefetch_size(v))
    }

    // bool prefetch = 6;


    pub fn get_prefetch(&self) -> bool {
        match self.prefetch_opt {
            ::std::option::Option::Some(Options_oneof_prefetch_opt::prefetch(v)) => v,
            _ => false,
        }
    }
    pub fn clear_prefetch(&mut self) {
        self.prefetch_opt = ::std::option::Option::None;
    }

    pub fn has_prefetch(&self) -> bool {
        match self.prefetch_opt {
            ::std::option::Option::Some(Options_oneof_prefetch_opt::prefetch(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_prefetch(&mut self, v: bool) {
        self.prefetch_opt = ::std::option::Option::Some(Options_oneof_prefetch_opt::prefetch(v))
    }

    // int32 session_idle_timeout_millis = 7;


    pub fn get_session_idle_timeout_millis(&self) -> i32 {
        match self.session_idle_timeout_opt {
            ::std::option::Option::Some(Options_oneof_session_idle_timeout_opt::session_idle_timeout_millis(v)) => v,
            _ => 0,
        }
    }
    pub fn clear_session_idle_timeout_millis(&mut self) {
        self.session_idle_timeout_opt = ::std::option::Option::None;
    }

    pub fn has_session_idle_timeout_millis(&self) -> bool {
        match self.session_idle_timeout_opt {
            ::std::option::Option::Some(Options_oneof_session_idle_timeout_opt::session_idle_timeout_millis(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_session_idle_timeout_millis(&mut self, v: i32) {
        self.session_idle_timeout_opt = ::std::option::Option::Some(Options_oneof_session_idle_timeout_opt::session_idle_timeout_millis(v))
    }

    // int32 transaction_timeout_millis = 8;


    pub fn get_transaction_timeout_millis(&self) -> i32 {
        match self.transaction_timeout_opt {
            ::std::option::Option::Some(Options_oneof_transaction_timeout_opt::transaction_timeout_millis(v)) => v,
            _ => 0,
        }
    }
    pub fn clear_transaction_timeout_millis(&mut self) {
        self.transaction_timeout_opt = ::std::option::Option::None;
    }

    pub fn has_transaction_timeout_millis(&self) -> bool {
        match self.transaction_timeout_opt {
            ::std::option::Option::Some(Options_oneof_transaction_timeout_opt::transaction_timeout_millis(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_transaction_timeout_millis(&mut self, v: i32) {
        self.transaction_timeout_opt = ::std::option::Option::Some(Options_oneof_transaction_timeout_opt::transaction_timeout_millis(v))
    }

    // int32 schema_lock_acquire_timeout_millis = 9;


    pub fn get_schema_lock_acquire_timeout_millis(&self) -> i32 {
        match self.schema_lock_acquire_timeout_opt {
            ::std::option::Option::Some(Options_oneof_schema_lock_acquire_timeout_opt::schema_lock_acquire_timeout_millis(v)) => v,
            _ => 0,
        }
    }
    pub fn clear_schema_lock_acquire_timeout_millis(&mut self) {
        self.schema_lock_acquire_timeout_opt = ::std::option::Option::None;
    }

    pub fn has_schema_lock_acquire_timeout_millis(&self) -> bool {
        match self.schema_lock_acquire_timeout_opt {
            ::std::option::Option::Some(Options_oneof_schema_lock_acquire_timeout_opt::schema_lock_acquire_timeout_millis(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_schema_lock_acquire_timeout_millis(&mut self, v: i32) {
        self.schema_lock_acquire_timeout_opt = ::std::option::Option::Some(Options_oneof_schema_lock_acquire_timeout_opt::schema_lock_acquire_timeout_millis(v))
    }

    // bool read_any_replica = 10;


    pub fn get_read_any_replica(&self) -> bool {
        match self.read_any_replica_opt {
            ::std::option::Option::Some(Options_oneof_read_any_replica_opt::read_any_replica(v)) => v,
            _ => false,
        }
    }
    pub fn clear_read_any_replica(&mut self) {
        self.read_any_replica_opt = ::std::option::Option::None;
    }

    pub fn has_read_any_replica(&self) -> bool {
        match self.read_any_replica_opt {
            ::std::option::Option::Some(Options_oneof_read_any_replica_opt::read_any_replica(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_read_any_replica(&mut self, v: bool) {
        self.read_any_replica_opt = ::std::option::Option::Some(Options_oneof_read_any_replica_opt::read_any_replica(v))
    }
}

impl ::protobuf::Message for Options {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.infer_opt = ::std::option::Option::Some(Options_oneof_infer_opt::infer(is.read_bool()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.trace_inference_opt = ::std::option::Option::Some(Options_oneof_trace_inference_opt::trace_inference(is.read_bool()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.explain_opt = ::std::option::Option::Some(Options_oneof_explain_opt::explain(is.read_bool()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.parallel_opt = ::std::option::Option::Some(Options_oneof_parallel_opt::parallel(is.read_bool()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.prefetch_size_opt = ::std::option::Option::Some(Options_oneof_prefetch_size_opt::prefetch_size(is.read_int32()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.prefetch_opt = ::std::option::Option::Some(Options_oneof_prefetch_opt::prefetch(is.read_bool()?));
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.session_idle_timeout_opt = ::std::option::Option::Some(Options_oneof_session_idle_timeout_opt::session_idle_timeout_millis(is.read_int32()?));
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.transaction_timeout_opt = ::std::option::Option::Some(Options_oneof_transaction_timeout_opt::transaction_timeout_millis(is.read_int32()?));
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.schema_lock_acquire_timeout_opt = ::std::option::Option::Some(Options_oneof_schema_lock_acquire_timeout_opt::schema_lock_acquire_timeout_millis(is.read_int32()?));
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.read_any_replica_opt = ::std::option::Option::Some(Options_oneof_read_any_replica_opt::read_any_replica(is.read_bool()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.infer_opt {
            match v {
                &Options_oneof_infer_opt::infer(v) => {
                    my_size += 2;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.trace_inference_opt {
            match v {
                &Options_oneof_trace_inference_opt::trace_inference(v) => {
                    my_size += 2;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.explain_opt {
            match v {
                &Options_oneof_explain_opt::explain(v) => {
                    my_size += 2;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.parallel_opt {
            match v {
                &Options_oneof_parallel_opt::parallel(v) => {
                    my_size += 2;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.prefetch_size_opt {
            match v {
                &Options_oneof_prefetch_size_opt::prefetch_size(v) => {
                    my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.prefetch_opt {
            match v {
                &Options_oneof_prefetch_opt::prefetch(v) => {
                    my_size += 2;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.session_idle_timeout_opt {
            match v {
                &Options_oneof_session_idle_timeout_opt::session_idle_timeout_millis(v) => {
                    my_size += ::protobuf::rt::value_size(7, v, ::protobuf::wire_format::WireTypeVarint);
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.transaction_timeout_opt {
            match v {
                &Options_oneof_transaction_timeout_opt::transaction_timeout_millis(v) => {
                    my_size += ::protobuf::rt::value_size(8, v, ::protobuf::wire_format::WireTypeVarint);
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.schema_lock_acquire_timeout_opt {
            match v {
                &Options_oneof_schema_lock_acquire_timeout_opt::schema_lock_acquire_timeout_millis(v) => {
                    my_size += ::protobuf::rt::value_size(9, v, ::protobuf::wire_format::WireTypeVarint);
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.read_any_replica_opt {
            match v {
                &Options_oneof_read_any_replica_opt::read_any_replica(v) => {
                    my_size += 2;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.infer_opt {
            match v {
                &Options_oneof_infer_opt::infer(v) => {
                    os.write_bool(1, v)?;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.trace_inference_opt {
            match v {
                &Options_oneof_trace_inference_opt::trace_inference(v) => {
                    os.write_bool(2, v)?;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.explain_opt {
            match v {
                &Options_oneof_explain_opt::explain(v) => {
                    os.write_bool(3, v)?;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.parallel_opt {
            match v {
                &Options_oneof_parallel_opt::parallel(v) => {
                    os.write_bool(4, v)?;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.prefetch_size_opt {
            match v {
                &Options_oneof_prefetch_size_opt::prefetch_size(v) => {
                    os.write_int32(5, v)?;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.prefetch_opt {
            match v {
                &Options_oneof_prefetch_opt::prefetch(v) => {
                    os.write_bool(6, v)?;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.session_idle_timeout_opt {
            match v {
                &Options_oneof_session_idle_timeout_opt::session_idle_timeout_millis(v) => {
                    os.write_int32(7, v)?;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.transaction_timeout_opt {
            match v {
                &Options_oneof_transaction_timeout_opt::transaction_timeout_millis(v) => {
                    os.write_int32(8, v)?;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.schema_lock_acquire_timeout_opt {
            match v {
                &Options_oneof_schema_lock_acquire_timeout_opt::schema_lock_acquire_timeout_millis(v) => {
                    os.write_int32(9, v)?;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.read_any_replica_opt {
            match v {
                &Options_oneof_read_any_replica_opt::read_any_replica(v) => {
                    os.write_bool(10, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Options {
        Options::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor::<_>(
                "infer",
                Options::has_infer,
                Options::get_infer,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor::<_>(
                "trace_inference",
                Options::has_trace_inference,
                Options::get_trace_inference,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor::<_>(
                "explain",
                Options::has_explain,
                Options::get_explain,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor::<_>(
                "parallel",
                Options::has_parallel,
                Options::get_parallel,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_i32_accessor::<_>(
                "prefetch_size",
                Options::has_prefetch_size,
                Options::get_prefetch_size,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor::<_>(
                "prefetch",
                Options::has_prefetch,
                Options::get_prefetch,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_i32_accessor::<_>(
                "session_idle_timeout_millis",
                Options::has_session_idle_timeout_millis,
                Options::get_session_idle_timeout_millis,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_i32_accessor::<_>(
                "transaction_timeout_millis",
                Options::has_transaction_timeout_millis,
                Options::get_transaction_timeout_millis,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_i32_accessor::<_>(
                "schema_lock_acquire_timeout_millis",
                Options::has_schema_lock_acquire_timeout_millis,
                Options::get_schema_lock_acquire_timeout_millis,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor::<_>(
                "read_any_replica",
                Options::has_read_any_replica,
                Options::get_read_any_replica,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Options>(
                "Options",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Options {
        static instance: ::protobuf::rt::LazyV2<Options> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Options::new)
    }
}

impl ::protobuf::Clear for Options {
    fn clear(&mut self) {
        self.infer_opt = ::std::option::Option::None;
        self.trace_inference_opt = ::std::option::Option::None;
        self.explain_opt = ::std::option::Option::None;
        self.parallel_opt = ::std::option::Option::None;
        self.prefetch_size_opt = ::std::option::Option::None;
        self.prefetch_opt = ::std::option::Option::None;
        self.session_idle_timeout_opt = ::std::option::Option::None;
        self.transaction_timeout_opt = ::std::option::Option::None;
        self.schema_lock_acquire_timeout_opt = ::std::option::Option::None;
        self.read_any_replica_opt = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Options {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Options {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x14common/options.proto\x12\x0ftypedb.protocol\"\xa0\x05\n\x07Options\
    \x12\x16\n\x05infer\x18\x01\x20\x01(\x08H\0R\x05infer\x12)\n\x0ftrace_in\
    ference\x18\x02\x20\x01(\x08H\x01R\x0etraceInference\x12\x1a\n\x07explai\
    n\x18\x03\x20\x01(\x08H\x02R\x07explain\x12\x1c\n\x08parallel\x18\x04\
    \x20\x01(\x08H\x03R\x08parallel\x12%\n\rprefetch_size\x18\x05\x20\x01(\
    \x05H\x04R\x0cprefetchSize\x12\x1c\n\x08prefetch\x18\x06\x20\x01(\x08H\
    \x05R\x08prefetch\x12?\n\x1bsession_idle_timeout_millis\x18\x07\x20\x01(\
    \x05H\x06R\x18sessionIdleTimeoutMillis\x12>\n\x1atransaction_timeout_mil\
    lis\x18\x08\x20\x01(\x05H\x07R\x18transactionTimeoutMillis\x12L\n\"schem\
    a_lock_acquire_timeout_millis\x18\t\x20\x01(\x05H\x08R\x1eschemaLockAcqu\
    ireTimeoutMillis\x12*\n\x10read_any_replica\x18\n\x20\x01(\x08H\tR\x0ere\
    adAnyReplicaB\x0b\n\tinfer_optB\x15\n\x13trace_inference_optB\r\n\x0bexp\
    lain_optB\x0e\n\x0cparallel_optB\x13\n\x11prefetch_size_optB\x0e\n\x0cpr\
    efetch_optB\x1a\n\x18session_idle_timeout_optB\x19\n\x17transaction_time\
    out_optB!\n\x1fschema_lock_acquire_timeout_optB\x16\n\x14read_any_replic\
    a_optB+\n\x1bcom.vaticle.typedb.protocolB\x0cOptionsProtob\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
