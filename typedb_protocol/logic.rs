// This file is generated by rust-protobuf 2.18.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `common/logic.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_2;

#[derive(PartialEq,Clone,Default)]
pub struct LogicManager {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LogicManager {
    fn default() -> &'a LogicManager {
        <LogicManager as ::protobuf::Message>::default_instance()
    }
}

impl LogicManager {
    pub fn new() -> LogicManager {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for LogicManager {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LogicManager {
        LogicManager::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LogicManager>(
                "LogicManager",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LogicManager {
        static instance: ::protobuf::rt::LazyV2<LogicManager> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LogicManager::new)
    }
}

impl ::protobuf::Clear for LogicManager {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LogicManager {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LogicManager {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LogicManager_Req {
    // message oneof groups
    pub req: ::std::option::Option<LogicManager_Req_oneof_req>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LogicManager_Req {
    fn default() -> &'a LogicManager_Req {
        <LogicManager_Req as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum LogicManager_Req_oneof_req {
    get_rule_req(LogicManager_GetRule_Req),
    put_rule_req(LogicManager_PutRule_Req),
    get_rules_req(LogicManager_GetRules_Req),
}

impl LogicManager_Req {
    pub fn new() -> LogicManager_Req {
        ::std::default::Default::default()
    }

    // .typedb.protocol.LogicManager.GetRule.Req get_rule_req = 1;


    pub fn get_get_rule_req(&self) -> &LogicManager_GetRule_Req {
        match self.req {
            ::std::option::Option::Some(LogicManager_Req_oneof_req::get_rule_req(ref v)) => v,
            _ => <LogicManager_GetRule_Req as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_get_rule_req(&mut self) {
        self.req = ::std::option::Option::None;
    }

    pub fn has_get_rule_req(&self) -> bool {
        match self.req {
            ::std::option::Option::Some(LogicManager_Req_oneof_req::get_rule_req(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_get_rule_req(&mut self, v: LogicManager_GetRule_Req) {
        self.req = ::std::option::Option::Some(LogicManager_Req_oneof_req::get_rule_req(v))
    }

    // Mutable pointer to the field.
    pub fn mut_get_rule_req(&mut self) -> &mut LogicManager_GetRule_Req {
        if let ::std::option::Option::Some(LogicManager_Req_oneof_req::get_rule_req(_)) = self.req {
        } else {
            self.req = ::std::option::Option::Some(LogicManager_Req_oneof_req::get_rule_req(LogicManager_GetRule_Req::new()));
        }
        match self.req {
            ::std::option::Option::Some(LogicManager_Req_oneof_req::get_rule_req(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_get_rule_req(&mut self) -> LogicManager_GetRule_Req {
        if self.has_get_rule_req() {
            match self.req.take() {
                ::std::option::Option::Some(LogicManager_Req_oneof_req::get_rule_req(v)) => v,
                _ => panic!(),
            }
        } else {
            LogicManager_GetRule_Req::new()
        }
    }

    // .typedb.protocol.LogicManager.PutRule.Req put_rule_req = 2;


    pub fn get_put_rule_req(&self) -> &LogicManager_PutRule_Req {
        match self.req {
            ::std::option::Option::Some(LogicManager_Req_oneof_req::put_rule_req(ref v)) => v,
            _ => <LogicManager_PutRule_Req as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_put_rule_req(&mut self) {
        self.req = ::std::option::Option::None;
    }

    pub fn has_put_rule_req(&self) -> bool {
        match self.req {
            ::std::option::Option::Some(LogicManager_Req_oneof_req::put_rule_req(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_put_rule_req(&mut self, v: LogicManager_PutRule_Req) {
        self.req = ::std::option::Option::Some(LogicManager_Req_oneof_req::put_rule_req(v))
    }

    // Mutable pointer to the field.
    pub fn mut_put_rule_req(&mut self) -> &mut LogicManager_PutRule_Req {
        if let ::std::option::Option::Some(LogicManager_Req_oneof_req::put_rule_req(_)) = self.req {
        } else {
            self.req = ::std::option::Option::Some(LogicManager_Req_oneof_req::put_rule_req(LogicManager_PutRule_Req::new()));
        }
        match self.req {
            ::std::option::Option::Some(LogicManager_Req_oneof_req::put_rule_req(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_put_rule_req(&mut self) -> LogicManager_PutRule_Req {
        if self.has_put_rule_req() {
            match self.req.take() {
                ::std::option::Option::Some(LogicManager_Req_oneof_req::put_rule_req(v)) => v,
                _ => panic!(),
            }
        } else {
            LogicManager_PutRule_Req::new()
        }
    }

    // .typedb.protocol.LogicManager.GetRules.Req get_rules_req = 3;


    pub fn get_get_rules_req(&self) -> &LogicManager_GetRules_Req {
        match self.req {
            ::std::option::Option::Some(LogicManager_Req_oneof_req::get_rules_req(ref v)) => v,
            _ => <LogicManager_GetRules_Req as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_get_rules_req(&mut self) {
        self.req = ::std::option::Option::None;
    }

    pub fn has_get_rules_req(&self) -> bool {
        match self.req {
            ::std::option::Option::Some(LogicManager_Req_oneof_req::get_rules_req(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_get_rules_req(&mut self, v: LogicManager_GetRules_Req) {
        self.req = ::std::option::Option::Some(LogicManager_Req_oneof_req::get_rules_req(v))
    }

    // Mutable pointer to the field.
    pub fn mut_get_rules_req(&mut self) -> &mut LogicManager_GetRules_Req {
        if let ::std::option::Option::Some(LogicManager_Req_oneof_req::get_rules_req(_)) = self.req {
        } else {
            self.req = ::std::option::Option::Some(LogicManager_Req_oneof_req::get_rules_req(LogicManager_GetRules_Req::new()));
        }
        match self.req {
            ::std::option::Option::Some(LogicManager_Req_oneof_req::get_rules_req(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_get_rules_req(&mut self) -> LogicManager_GetRules_Req {
        if self.has_get_rules_req() {
            match self.req.take() {
                ::std::option::Option::Some(LogicManager_Req_oneof_req::get_rules_req(v)) => v,
                _ => panic!(),
            }
        } else {
            LogicManager_GetRules_Req::new()
        }
    }
}

impl ::protobuf::Message for LogicManager_Req {
    fn is_initialized(&self) -> bool {
        if let Some(LogicManager_Req_oneof_req::get_rule_req(ref v)) = self.req {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(LogicManager_Req_oneof_req::put_rule_req(ref v)) = self.req {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(LogicManager_Req_oneof_req::get_rules_req(ref v)) = self.req {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.req = ::std::option::Option::Some(LogicManager_Req_oneof_req::get_rule_req(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.req = ::std::option::Option::Some(LogicManager_Req_oneof_req::put_rule_req(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.req = ::std::option::Option::Some(LogicManager_Req_oneof_req::get_rules_req(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.req {
            match v {
                &LogicManager_Req_oneof_req::get_rule_req(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &LogicManager_Req_oneof_req::put_rule_req(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &LogicManager_Req_oneof_req::get_rules_req(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.req {
            match v {
                &LogicManager_Req_oneof_req::get_rule_req(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &LogicManager_Req_oneof_req::put_rule_req(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &LogicManager_Req_oneof_req::get_rules_req(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LogicManager_Req {
        LogicManager_Req::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, LogicManager_GetRule_Req>(
                "get_rule_req",
                LogicManager_Req::has_get_rule_req,
                LogicManager_Req::get_get_rule_req,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, LogicManager_PutRule_Req>(
                "put_rule_req",
                LogicManager_Req::has_put_rule_req,
                LogicManager_Req::get_put_rule_req,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, LogicManager_GetRules_Req>(
                "get_rules_req",
                LogicManager_Req::has_get_rules_req,
                LogicManager_Req::get_get_rules_req,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LogicManager_Req>(
                "LogicManager.Req",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LogicManager_Req {
        static instance: ::protobuf::rt::LazyV2<LogicManager_Req> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LogicManager_Req::new)
    }
}

impl ::protobuf::Clear for LogicManager_Req {
    fn clear(&mut self) {
        self.req = ::std::option::Option::None;
        self.req = ::std::option::Option::None;
        self.req = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LogicManager_Req {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LogicManager_Req {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LogicManager_Res {
    // message oneof groups
    pub res: ::std::option::Option<LogicManager_Res_oneof_res>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LogicManager_Res {
    fn default() -> &'a LogicManager_Res {
        <LogicManager_Res as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum LogicManager_Res_oneof_res {
    get_rule_res(LogicManager_GetRule_Res),
    put_rule_res(LogicManager_PutRule_Res),
}

impl LogicManager_Res {
    pub fn new() -> LogicManager_Res {
        ::std::default::Default::default()
    }

    // .typedb.protocol.LogicManager.GetRule.Res get_rule_res = 1;


    pub fn get_get_rule_res(&self) -> &LogicManager_GetRule_Res {
        match self.res {
            ::std::option::Option::Some(LogicManager_Res_oneof_res::get_rule_res(ref v)) => v,
            _ => <LogicManager_GetRule_Res as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_get_rule_res(&mut self) {
        self.res = ::std::option::Option::None;
    }

    pub fn has_get_rule_res(&self) -> bool {
        match self.res {
            ::std::option::Option::Some(LogicManager_Res_oneof_res::get_rule_res(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_get_rule_res(&mut self, v: LogicManager_GetRule_Res) {
        self.res = ::std::option::Option::Some(LogicManager_Res_oneof_res::get_rule_res(v))
    }

    // Mutable pointer to the field.
    pub fn mut_get_rule_res(&mut self) -> &mut LogicManager_GetRule_Res {
        if let ::std::option::Option::Some(LogicManager_Res_oneof_res::get_rule_res(_)) = self.res {
        } else {
            self.res = ::std::option::Option::Some(LogicManager_Res_oneof_res::get_rule_res(LogicManager_GetRule_Res::new()));
        }
        match self.res {
            ::std::option::Option::Some(LogicManager_Res_oneof_res::get_rule_res(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_get_rule_res(&mut self) -> LogicManager_GetRule_Res {
        if self.has_get_rule_res() {
            match self.res.take() {
                ::std::option::Option::Some(LogicManager_Res_oneof_res::get_rule_res(v)) => v,
                _ => panic!(),
            }
        } else {
            LogicManager_GetRule_Res::new()
        }
    }

    // .typedb.protocol.LogicManager.PutRule.Res put_rule_res = 2;


    pub fn get_put_rule_res(&self) -> &LogicManager_PutRule_Res {
        match self.res {
            ::std::option::Option::Some(LogicManager_Res_oneof_res::put_rule_res(ref v)) => v,
            _ => <LogicManager_PutRule_Res as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_put_rule_res(&mut self) {
        self.res = ::std::option::Option::None;
    }

    pub fn has_put_rule_res(&self) -> bool {
        match self.res {
            ::std::option::Option::Some(LogicManager_Res_oneof_res::put_rule_res(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_put_rule_res(&mut self, v: LogicManager_PutRule_Res) {
        self.res = ::std::option::Option::Some(LogicManager_Res_oneof_res::put_rule_res(v))
    }

    // Mutable pointer to the field.
    pub fn mut_put_rule_res(&mut self) -> &mut LogicManager_PutRule_Res {
        if let ::std::option::Option::Some(LogicManager_Res_oneof_res::put_rule_res(_)) = self.res {
        } else {
            self.res = ::std::option::Option::Some(LogicManager_Res_oneof_res::put_rule_res(LogicManager_PutRule_Res::new()));
        }
        match self.res {
            ::std::option::Option::Some(LogicManager_Res_oneof_res::put_rule_res(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_put_rule_res(&mut self) -> LogicManager_PutRule_Res {
        if self.has_put_rule_res() {
            match self.res.take() {
                ::std::option::Option::Some(LogicManager_Res_oneof_res::put_rule_res(v)) => v,
                _ => panic!(),
            }
        } else {
            LogicManager_PutRule_Res::new()
        }
    }
}

impl ::protobuf::Message for LogicManager_Res {
    fn is_initialized(&self) -> bool {
        if let Some(LogicManager_Res_oneof_res::get_rule_res(ref v)) = self.res {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(LogicManager_Res_oneof_res::put_rule_res(ref v)) = self.res {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.res = ::std::option::Option::Some(LogicManager_Res_oneof_res::get_rule_res(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.res = ::std::option::Option::Some(LogicManager_Res_oneof_res::put_rule_res(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.res {
            match v {
                &LogicManager_Res_oneof_res::get_rule_res(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &LogicManager_Res_oneof_res::put_rule_res(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.res {
            match v {
                &LogicManager_Res_oneof_res::get_rule_res(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &LogicManager_Res_oneof_res::put_rule_res(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LogicManager_Res {
        LogicManager_Res::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, LogicManager_GetRule_Res>(
                "get_rule_res",
                LogicManager_Res::has_get_rule_res,
                LogicManager_Res::get_get_rule_res,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, LogicManager_PutRule_Res>(
                "put_rule_res",
                LogicManager_Res::has_put_rule_res,
                LogicManager_Res::get_put_rule_res,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LogicManager_Res>(
                "LogicManager.Res",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LogicManager_Res {
        static instance: ::protobuf::rt::LazyV2<LogicManager_Res> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LogicManager_Res::new)
    }
}

impl ::protobuf::Clear for LogicManager_Res {
    fn clear(&mut self) {
        self.res = ::std::option::Option::None;
        self.res = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LogicManager_Res {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LogicManager_Res {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LogicManager_ResPart {
    // message fields
    pub get_rules_res_part: ::protobuf::SingularPtrField<LogicManager_GetRules_ResPart>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LogicManager_ResPart {
    fn default() -> &'a LogicManager_ResPart {
        <LogicManager_ResPart as ::protobuf::Message>::default_instance()
    }
}

impl LogicManager_ResPart {
    pub fn new() -> LogicManager_ResPart {
        ::std::default::Default::default()
    }

    // .typedb.protocol.LogicManager.GetRules.ResPart get_rules_res_part = 1;


    pub fn get_get_rules_res_part(&self) -> &LogicManager_GetRules_ResPart {
        self.get_rules_res_part.as_ref().unwrap_or_else(|| <LogicManager_GetRules_ResPart as ::protobuf::Message>::default_instance())
    }
    pub fn clear_get_rules_res_part(&mut self) {
        self.get_rules_res_part.clear();
    }

    pub fn has_get_rules_res_part(&self) -> bool {
        self.get_rules_res_part.is_some()
    }

    // Param is passed by value, moved
    pub fn set_get_rules_res_part(&mut self, v: LogicManager_GetRules_ResPart) {
        self.get_rules_res_part = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_get_rules_res_part(&mut self) -> &mut LogicManager_GetRules_ResPart {
        if self.get_rules_res_part.is_none() {
            self.get_rules_res_part.set_default();
        }
        self.get_rules_res_part.as_mut().unwrap()
    }

    // Take field
    pub fn take_get_rules_res_part(&mut self) -> LogicManager_GetRules_ResPart {
        self.get_rules_res_part.take().unwrap_or_else(|| LogicManager_GetRules_ResPart::new())
    }
}

impl ::protobuf::Message for LogicManager_ResPart {
    fn is_initialized(&self) -> bool {
        for v in &self.get_rules_res_part {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.get_rules_res_part)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.get_rules_res_part.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.get_rules_res_part.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LogicManager_ResPart {
        LogicManager_ResPart::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<LogicManager_GetRules_ResPart>>(
                "get_rules_res_part",
                |m: &LogicManager_ResPart| { &m.get_rules_res_part },
                |m: &mut LogicManager_ResPart| { &mut m.get_rules_res_part },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LogicManager_ResPart>(
                "LogicManager.ResPart",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LogicManager_ResPart {
        static instance: ::protobuf::rt::LazyV2<LogicManager_ResPart> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LogicManager_ResPart::new)
    }
}

impl ::protobuf::Clear for LogicManager_ResPart {
    fn clear(&mut self) {
        self.get_rules_res_part.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LogicManager_ResPart {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LogicManager_ResPart {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LogicManager_GetRule {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LogicManager_GetRule {
    fn default() -> &'a LogicManager_GetRule {
        <LogicManager_GetRule as ::protobuf::Message>::default_instance()
    }
}

impl LogicManager_GetRule {
    pub fn new() -> LogicManager_GetRule {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for LogicManager_GetRule {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LogicManager_GetRule {
        LogicManager_GetRule::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LogicManager_GetRule>(
                "LogicManager.GetRule",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LogicManager_GetRule {
        static instance: ::protobuf::rt::LazyV2<LogicManager_GetRule> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LogicManager_GetRule::new)
    }
}

impl ::protobuf::Clear for LogicManager_GetRule {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LogicManager_GetRule {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LogicManager_GetRule {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LogicManager_GetRule_Req {
    // message fields
    pub label: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LogicManager_GetRule_Req {
    fn default() -> &'a LogicManager_GetRule_Req {
        <LogicManager_GetRule_Req as ::protobuf::Message>::default_instance()
    }
}

impl LogicManager_GetRule_Req {
    pub fn new() -> LogicManager_GetRule_Req {
        ::std::default::Default::default()
    }

    // string label = 1;


    pub fn get_label(&self) -> &str {
        &self.label
    }
    pub fn clear_label(&mut self) {
        self.label.clear();
    }

    // Param is passed by value, moved
    pub fn set_label(&mut self, v: ::std::string::String) {
        self.label = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_label(&mut self) -> &mut ::std::string::String {
        &mut self.label
    }

    // Take field
    pub fn take_label(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.label, ::std::string::String::new())
    }
}

impl ::protobuf::Message for LogicManager_GetRule_Req {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.label)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.label.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.label);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.label.is_empty() {
            os.write_string(1, &self.label)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LogicManager_GetRule_Req {
        LogicManager_GetRule_Req::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "label",
                |m: &LogicManager_GetRule_Req| { &m.label },
                |m: &mut LogicManager_GetRule_Req| { &mut m.label },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LogicManager_GetRule_Req>(
                "LogicManager.GetRule.Req",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LogicManager_GetRule_Req {
        static instance: ::protobuf::rt::LazyV2<LogicManager_GetRule_Req> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LogicManager_GetRule_Req::new)
    }
}

impl ::protobuf::Clear for LogicManager_GetRule_Req {
    fn clear(&mut self) {
        self.label.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LogicManager_GetRule_Req {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LogicManager_GetRule_Req {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LogicManager_GetRule_Res {
    // message oneof groups
    pub res: ::std::option::Option<LogicManager_GetRule_Res_oneof_res>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LogicManager_GetRule_Res {
    fn default() -> &'a LogicManager_GetRule_Res {
        <LogicManager_GetRule_Res as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum LogicManager_GetRule_Res_oneof_res {
    rule(Rule),
}

impl LogicManager_GetRule_Res {
    pub fn new() -> LogicManager_GetRule_Res {
        ::std::default::Default::default()
    }

    // .typedb.protocol.Rule rule = 1;


    pub fn get_rule(&self) -> &Rule {
        match self.res {
            ::std::option::Option::Some(LogicManager_GetRule_Res_oneof_res::rule(ref v)) => v,
            _ => <Rule as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_rule(&mut self) {
        self.res = ::std::option::Option::None;
    }

    pub fn has_rule(&self) -> bool {
        match self.res {
            ::std::option::Option::Some(LogicManager_GetRule_Res_oneof_res::rule(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_rule(&mut self, v: Rule) {
        self.res = ::std::option::Option::Some(LogicManager_GetRule_Res_oneof_res::rule(v))
    }

    // Mutable pointer to the field.
    pub fn mut_rule(&mut self) -> &mut Rule {
        if let ::std::option::Option::Some(LogicManager_GetRule_Res_oneof_res::rule(_)) = self.res {
        } else {
            self.res = ::std::option::Option::Some(LogicManager_GetRule_Res_oneof_res::rule(Rule::new()));
        }
        match self.res {
            ::std::option::Option::Some(LogicManager_GetRule_Res_oneof_res::rule(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_rule(&mut self) -> Rule {
        if self.has_rule() {
            match self.res.take() {
                ::std::option::Option::Some(LogicManager_GetRule_Res_oneof_res::rule(v)) => v,
                _ => panic!(),
            }
        } else {
            Rule::new()
        }
    }
}

impl ::protobuf::Message for LogicManager_GetRule_Res {
    fn is_initialized(&self) -> bool {
        if let Some(LogicManager_GetRule_Res_oneof_res::rule(ref v)) = self.res {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.res = ::std::option::Option::Some(LogicManager_GetRule_Res_oneof_res::rule(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.res {
            match v {
                &LogicManager_GetRule_Res_oneof_res::rule(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.res {
            match v {
                &LogicManager_GetRule_Res_oneof_res::rule(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LogicManager_GetRule_Res {
        LogicManager_GetRule_Res::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Rule>(
                "rule",
                LogicManager_GetRule_Res::has_rule,
                LogicManager_GetRule_Res::get_rule,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LogicManager_GetRule_Res>(
                "LogicManager.GetRule.Res",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LogicManager_GetRule_Res {
        static instance: ::protobuf::rt::LazyV2<LogicManager_GetRule_Res> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LogicManager_GetRule_Res::new)
    }
}

impl ::protobuf::Clear for LogicManager_GetRule_Res {
    fn clear(&mut self) {
        self.res = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LogicManager_GetRule_Res {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LogicManager_GetRule_Res {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LogicManager_PutRule {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LogicManager_PutRule {
    fn default() -> &'a LogicManager_PutRule {
        <LogicManager_PutRule as ::protobuf::Message>::default_instance()
    }
}

impl LogicManager_PutRule {
    pub fn new() -> LogicManager_PutRule {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for LogicManager_PutRule {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LogicManager_PutRule {
        LogicManager_PutRule::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LogicManager_PutRule>(
                "LogicManager.PutRule",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LogicManager_PutRule {
        static instance: ::protobuf::rt::LazyV2<LogicManager_PutRule> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LogicManager_PutRule::new)
    }
}

impl ::protobuf::Clear for LogicManager_PutRule {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LogicManager_PutRule {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LogicManager_PutRule {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LogicManager_PutRule_Req {
    // message fields
    pub label: ::std::string::String,
    pub when: ::std::string::String,
    pub then: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LogicManager_PutRule_Req {
    fn default() -> &'a LogicManager_PutRule_Req {
        <LogicManager_PutRule_Req as ::protobuf::Message>::default_instance()
    }
}

impl LogicManager_PutRule_Req {
    pub fn new() -> LogicManager_PutRule_Req {
        ::std::default::Default::default()
    }

    // string label = 1;


    pub fn get_label(&self) -> &str {
        &self.label
    }
    pub fn clear_label(&mut self) {
        self.label.clear();
    }

    // Param is passed by value, moved
    pub fn set_label(&mut self, v: ::std::string::String) {
        self.label = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_label(&mut self) -> &mut ::std::string::String {
        &mut self.label
    }

    // Take field
    pub fn take_label(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.label, ::std::string::String::new())
    }

    // string when = 2;


    pub fn get_when(&self) -> &str {
        &self.when
    }
    pub fn clear_when(&mut self) {
        self.when.clear();
    }

    // Param is passed by value, moved
    pub fn set_when(&mut self, v: ::std::string::String) {
        self.when = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_when(&mut self) -> &mut ::std::string::String {
        &mut self.when
    }

    // Take field
    pub fn take_when(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.when, ::std::string::String::new())
    }

    // string then = 3;


    pub fn get_then(&self) -> &str {
        &self.then
    }
    pub fn clear_then(&mut self) {
        self.then.clear();
    }

    // Param is passed by value, moved
    pub fn set_then(&mut self, v: ::std::string::String) {
        self.then = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_then(&mut self) -> &mut ::std::string::String {
        &mut self.then
    }

    // Take field
    pub fn take_then(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.then, ::std::string::String::new())
    }
}

impl ::protobuf::Message for LogicManager_PutRule_Req {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.label)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.when)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.then)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.label.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.label);
        }
        if !self.when.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.when);
        }
        if !self.then.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.then);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.label.is_empty() {
            os.write_string(1, &self.label)?;
        }
        if !self.when.is_empty() {
            os.write_string(2, &self.when)?;
        }
        if !self.then.is_empty() {
            os.write_string(3, &self.then)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LogicManager_PutRule_Req {
        LogicManager_PutRule_Req::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "label",
                |m: &LogicManager_PutRule_Req| { &m.label },
                |m: &mut LogicManager_PutRule_Req| { &mut m.label },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "when",
                |m: &LogicManager_PutRule_Req| { &m.when },
                |m: &mut LogicManager_PutRule_Req| { &mut m.when },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "then",
                |m: &LogicManager_PutRule_Req| { &m.then },
                |m: &mut LogicManager_PutRule_Req| { &mut m.then },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LogicManager_PutRule_Req>(
                "LogicManager.PutRule.Req",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LogicManager_PutRule_Req {
        static instance: ::protobuf::rt::LazyV2<LogicManager_PutRule_Req> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LogicManager_PutRule_Req::new)
    }
}

impl ::protobuf::Clear for LogicManager_PutRule_Req {
    fn clear(&mut self) {
        self.label.clear();
        self.when.clear();
        self.then.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LogicManager_PutRule_Req {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LogicManager_PutRule_Req {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LogicManager_PutRule_Res {
    // message fields
    pub rule: ::protobuf::SingularPtrField<Rule>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LogicManager_PutRule_Res {
    fn default() -> &'a LogicManager_PutRule_Res {
        <LogicManager_PutRule_Res as ::protobuf::Message>::default_instance()
    }
}

impl LogicManager_PutRule_Res {
    pub fn new() -> LogicManager_PutRule_Res {
        ::std::default::Default::default()
    }

    // .typedb.protocol.Rule rule = 1;


    pub fn get_rule(&self) -> &Rule {
        self.rule.as_ref().unwrap_or_else(|| <Rule as ::protobuf::Message>::default_instance())
    }
    pub fn clear_rule(&mut self) {
        self.rule.clear();
    }

    pub fn has_rule(&self) -> bool {
        self.rule.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rule(&mut self, v: Rule) {
        self.rule = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rule(&mut self) -> &mut Rule {
        if self.rule.is_none() {
            self.rule.set_default();
        }
        self.rule.as_mut().unwrap()
    }

    // Take field
    pub fn take_rule(&mut self) -> Rule {
        self.rule.take().unwrap_or_else(|| Rule::new())
    }
}

impl ::protobuf::Message for LogicManager_PutRule_Res {
    fn is_initialized(&self) -> bool {
        for v in &self.rule {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.rule)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.rule.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.rule.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LogicManager_PutRule_Res {
        LogicManager_PutRule_Res::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Rule>>(
                "rule",
                |m: &LogicManager_PutRule_Res| { &m.rule },
                |m: &mut LogicManager_PutRule_Res| { &mut m.rule },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LogicManager_PutRule_Res>(
                "LogicManager.PutRule.Res",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LogicManager_PutRule_Res {
        static instance: ::protobuf::rt::LazyV2<LogicManager_PutRule_Res> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LogicManager_PutRule_Res::new)
    }
}

impl ::protobuf::Clear for LogicManager_PutRule_Res {
    fn clear(&mut self) {
        self.rule.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LogicManager_PutRule_Res {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LogicManager_PutRule_Res {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LogicManager_GetRules {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LogicManager_GetRules {
    fn default() -> &'a LogicManager_GetRules {
        <LogicManager_GetRules as ::protobuf::Message>::default_instance()
    }
}

impl LogicManager_GetRules {
    pub fn new() -> LogicManager_GetRules {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for LogicManager_GetRules {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LogicManager_GetRules {
        LogicManager_GetRules::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LogicManager_GetRules>(
                "LogicManager.GetRules",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LogicManager_GetRules {
        static instance: ::protobuf::rt::LazyV2<LogicManager_GetRules> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LogicManager_GetRules::new)
    }
}

impl ::protobuf::Clear for LogicManager_GetRules {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LogicManager_GetRules {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LogicManager_GetRules {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LogicManager_GetRules_Req {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LogicManager_GetRules_Req {
    fn default() -> &'a LogicManager_GetRules_Req {
        <LogicManager_GetRules_Req as ::protobuf::Message>::default_instance()
    }
}

impl LogicManager_GetRules_Req {
    pub fn new() -> LogicManager_GetRules_Req {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for LogicManager_GetRules_Req {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LogicManager_GetRules_Req {
        LogicManager_GetRules_Req::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LogicManager_GetRules_Req>(
                "LogicManager.GetRules.Req",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LogicManager_GetRules_Req {
        static instance: ::protobuf::rt::LazyV2<LogicManager_GetRules_Req> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LogicManager_GetRules_Req::new)
    }
}

impl ::protobuf::Clear for LogicManager_GetRules_Req {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LogicManager_GetRules_Req {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LogicManager_GetRules_Req {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LogicManager_GetRules_ResPart {
    // message fields
    pub rules: ::protobuf::RepeatedField<Rule>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LogicManager_GetRules_ResPart {
    fn default() -> &'a LogicManager_GetRules_ResPart {
        <LogicManager_GetRules_ResPart as ::protobuf::Message>::default_instance()
    }
}

impl LogicManager_GetRules_ResPart {
    pub fn new() -> LogicManager_GetRules_ResPart {
        ::std::default::Default::default()
    }

    // repeated .typedb.protocol.Rule rules = 1;


    pub fn get_rules(&self) -> &[Rule] {
        &self.rules
    }
    pub fn clear_rules(&mut self) {
        self.rules.clear();
    }

    // Param is passed by value, moved
    pub fn set_rules(&mut self, v: ::protobuf::RepeatedField<Rule>) {
        self.rules = v;
    }

    // Mutable pointer to the field.
    pub fn mut_rules(&mut self) -> &mut ::protobuf::RepeatedField<Rule> {
        &mut self.rules
    }

    // Take field
    pub fn take_rules(&mut self) -> ::protobuf::RepeatedField<Rule> {
        ::std::mem::replace(&mut self.rules, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for LogicManager_GetRules_ResPart {
    fn is_initialized(&self) -> bool {
        for v in &self.rules {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.rules)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.rules {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.rules {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LogicManager_GetRules_ResPart {
        LogicManager_GetRules_ResPart::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Rule>>(
                "rules",
                |m: &LogicManager_GetRules_ResPart| { &m.rules },
                |m: &mut LogicManager_GetRules_ResPart| { &mut m.rules },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LogicManager_GetRules_ResPart>(
                "LogicManager.GetRules.ResPart",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LogicManager_GetRules_ResPart {
        static instance: ::protobuf::rt::LazyV2<LogicManager_GetRules_ResPart> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LogicManager_GetRules_ResPart::new)
    }
}

impl ::protobuf::Clear for LogicManager_GetRules_ResPart {
    fn clear(&mut self) {
        self.rules.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LogicManager_GetRules_ResPart {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LogicManager_GetRules_ResPart {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Rule {
    // message fields
    pub label: ::std::string::String,
    pub when: ::std::string::String,
    pub then: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Rule {
    fn default() -> &'a Rule {
        <Rule as ::protobuf::Message>::default_instance()
    }
}

impl Rule {
    pub fn new() -> Rule {
        ::std::default::Default::default()
    }

    // string label = 1;


    pub fn get_label(&self) -> &str {
        &self.label
    }
    pub fn clear_label(&mut self) {
        self.label.clear();
    }

    // Param is passed by value, moved
    pub fn set_label(&mut self, v: ::std::string::String) {
        self.label = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_label(&mut self) -> &mut ::std::string::String {
        &mut self.label
    }

    // Take field
    pub fn take_label(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.label, ::std::string::String::new())
    }

    // string when = 2;


    pub fn get_when(&self) -> &str {
        &self.when
    }
    pub fn clear_when(&mut self) {
        self.when.clear();
    }

    // Param is passed by value, moved
    pub fn set_when(&mut self, v: ::std::string::String) {
        self.when = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_when(&mut self) -> &mut ::std::string::String {
        &mut self.when
    }

    // Take field
    pub fn take_when(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.when, ::std::string::String::new())
    }

    // string then = 3;


    pub fn get_then(&self) -> &str {
        &self.then
    }
    pub fn clear_then(&mut self) {
        self.then.clear();
    }

    // Param is passed by value, moved
    pub fn set_then(&mut self, v: ::std::string::String) {
        self.then = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_then(&mut self) -> &mut ::std::string::String {
        &mut self.then
    }

    // Take field
    pub fn take_then(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.then, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Rule {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.label)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.when)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.then)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.label.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.label);
        }
        if !self.when.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.when);
        }
        if !self.then.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.then);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.label.is_empty() {
            os.write_string(1, &self.label)?;
        }
        if !self.when.is_empty() {
            os.write_string(2, &self.when)?;
        }
        if !self.then.is_empty() {
            os.write_string(3, &self.then)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Rule {
        Rule::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "label",
                |m: &Rule| { &m.label },
                |m: &mut Rule| { &mut m.label },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "when",
                |m: &Rule| { &m.when },
                |m: &mut Rule| { &mut m.when },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "then",
                |m: &Rule| { &m.then },
                |m: &mut Rule| { &mut m.then },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Rule>(
                "Rule",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Rule {
        static instance: ::protobuf::rt::LazyV2<Rule> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Rule::new)
    }
}

impl ::protobuf::Clear for Rule {
    fn clear(&mut self) {
        self.label.clear();
        self.when.clear();
        self.then.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Rule {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Rule {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Rule_Req {
    // message fields
    pub label: ::std::string::String,
    // message oneof groups
    pub req: ::std::option::Option<Rule_Req_oneof_req>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Rule_Req {
    fn default() -> &'a Rule_Req {
        <Rule_Req as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Rule_Req_oneof_req {
    rule_delete_req(Rule_Delete_Req),
    rule_set_label_req(Rule_SetLabel_Req),
}

impl Rule_Req {
    pub fn new() -> Rule_Req {
        ::std::default::Default::default()
    }

    // string label = 1;


    pub fn get_label(&self) -> &str {
        &self.label
    }
    pub fn clear_label(&mut self) {
        self.label.clear();
    }

    // Param is passed by value, moved
    pub fn set_label(&mut self, v: ::std::string::String) {
        self.label = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_label(&mut self) -> &mut ::std::string::String {
        &mut self.label
    }

    // Take field
    pub fn take_label(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.label, ::std::string::String::new())
    }

    // .typedb.protocol.Rule.Delete.Req rule_delete_req = 100;


    pub fn get_rule_delete_req(&self) -> &Rule_Delete_Req {
        match self.req {
            ::std::option::Option::Some(Rule_Req_oneof_req::rule_delete_req(ref v)) => v,
            _ => <Rule_Delete_Req as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_rule_delete_req(&mut self) {
        self.req = ::std::option::Option::None;
    }

    pub fn has_rule_delete_req(&self) -> bool {
        match self.req {
            ::std::option::Option::Some(Rule_Req_oneof_req::rule_delete_req(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_rule_delete_req(&mut self, v: Rule_Delete_Req) {
        self.req = ::std::option::Option::Some(Rule_Req_oneof_req::rule_delete_req(v))
    }

    // Mutable pointer to the field.
    pub fn mut_rule_delete_req(&mut self) -> &mut Rule_Delete_Req {
        if let ::std::option::Option::Some(Rule_Req_oneof_req::rule_delete_req(_)) = self.req {
        } else {
            self.req = ::std::option::Option::Some(Rule_Req_oneof_req::rule_delete_req(Rule_Delete_Req::new()));
        }
        match self.req {
            ::std::option::Option::Some(Rule_Req_oneof_req::rule_delete_req(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_rule_delete_req(&mut self) -> Rule_Delete_Req {
        if self.has_rule_delete_req() {
            match self.req.take() {
                ::std::option::Option::Some(Rule_Req_oneof_req::rule_delete_req(v)) => v,
                _ => panic!(),
            }
        } else {
            Rule_Delete_Req::new()
        }
    }

    // .typedb.protocol.Rule.SetLabel.Req rule_set_label_req = 101;


    pub fn get_rule_set_label_req(&self) -> &Rule_SetLabel_Req {
        match self.req {
            ::std::option::Option::Some(Rule_Req_oneof_req::rule_set_label_req(ref v)) => v,
            _ => <Rule_SetLabel_Req as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_rule_set_label_req(&mut self) {
        self.req = ::std::option::Option::None;
    }

    pub fn has_rule_set_label_req(&self) -> bool {
        match self.req {
            ::std::option::Option::Some(Rule_Req_oneof_req::rule_set_label_req(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_rule_set_label_req(&mut self, v: Rule_SetLabel_Req) {
        self.req = ::std::option::Option::Some(Rule_Req_oneof_req::rule_set_label_req(v))
    }

    // Mutable pointer to the field.
    pub fn mut_rule_set_label_req(&mut self) -> &mut Rule_SetLabel_Req {
        if let ::std::option::Option::Some(Rule_Req_oneof_req::rule_set_label_req(_)) = self.req {
        } else {
            self.req = ::std::option::Option::Some(Rule_Req_oneof_req::rule_set_label_req(Rule_SetLabel_Req::new()));
        }
        match self.req {
            ::std::option::Option::Some(Rule_Req_oneof_req::rule_set_label_req(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_rule_set_label_req(&mut self) -> Rule_SetLabel_Req {
        if self.has_rule_set_label_req() {
            match self.req.take() {
                ::std::option::Option::Some(Rule_Req_oneof_req::rule_set_label_req(v)) => v,
                _ => panic!(),
            }
        } else {
            Rule_SetLabel_Req::new()
        }
    }
}

impl ::protobuf::Message for Rule_Req {
    fn is_initialized(&self) -> bool {
        if let Some(Rule_Req_oneof_req::rule_delete_req(ref v)) = self.req {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Rule_Req_oneof_req::rule_set_label_req(ref v)) = self.req {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.label)?;
                },
                100 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.req = ::std::option::Option::Some(Rule_Req_oneof_req::rule_delete_req(is.read_message()?));
                },
                101 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.req = ::std::option::Option::Some(Rule_Req_oneof_req::rule_set_label_req(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.label.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.label);
        }
        if let ::std::option::Option::Some(ref v) = self.req {
            match v {
                &Rule_Req_oneof_req::rule_delete_req(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Rule_Req_oneof_req::rule_set_label_req(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.label.is_empty() {
            os.write_string(1, &self.label)?;
        }
        if let ::std::option::Option::Some(ref v) = self.req {
            match v {
                &Rule_Req_oneof_req::rule_delete_req(ref v) => {
                    os.write_tag(100, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Rule_Req_oneof_req::rule_set_label_req(ref v) => {
                    os.write_tag(101, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Rule_Req {
        Rule_Req::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "label",
                |m: &Rule_Req| { &m.label },
                |m: &mut Rule_Req| { &mut m.label },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Rule_Delete_Req>(
                "rule_delete_req",
                Rule_Req::has_rule_delete_req,
                Rule_Req::get_rule_delete_req,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Rule_SetLabel_Req>(
                "rule_set_label_req",
                Rule_Req::has_rule_set_label_req,
                Rule_Req::get_rule_set_label_req,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Rule_Req>(
                "Rule.Req",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Rule_Req {
        static instance: ::protobuf::rt::LazyV2<Rule_Req> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Rule_Req::new)
    }
}

impl ::protobuf::Clear for Rule_Req {
    fn clear(&mut self) {
        self.label.clear();
        self.req = ::std::option::Option::None;
        self.req = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Rule_Req {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Rule_Req {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Rule_Res {
    // message oneof groups
    pub res: ::std::option::Option<Rule_Res_oneof_res>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Rule_Res {
    fn default() -> &'a Rule_Res {
        <Rule_Res as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Rule_Res_oneof_res {
    rule_delete_res(Rule_Delete_Res),
    rule_set_label_res(Rule_SetLabel_Res),
}

impl Rule_Res {
    pub fn new() -> Rule_Res {
        ::std::default::Default::default()
    }

    // .typedb.protocol.Rule.Delete.Res rule_delete_res = 100;


    pub fn get_rule_delete_res(&self) -> &Rule_Delete_Res {
        match self.res {
            ::std::option::Option::Some(Rule_Res_oneof_res::rule_delete_res(ref v)) => v,
            _ => <Rule_Delete_Res as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_rule_delete_res(&mut self) {
        self.res = ::std::option::Option::None;
    }

    pub fn has_rule_delete_res(&self) -> bool {
        match self.res {
            ::std::option::Option::Some(Rule_Res_oneof_res::rule_delete_res(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_rule_delete_res(&mut self, v: Rule_Delete_Res) {
        self.res = ::std::option::Option::Some(Rule_Res_oneof_res::rule_delete_res(v))
    }

    // Mutable pointer to the field.
    pub fn mut_rule_delete_res(&mut self) -> &mut Rule_Delete_Res {
        if let ::std::option::Option::Some(Rule_Res_oneof_res::rule_delete_res(_)) = self.res {
        } else {
            self.res = ::std::option::Option::Some(Rule_Res_oneof_res::rule_delete_res(Rule_Delete_Res::new()));
        }
        match self.res {
            ::std::option::Option::Some(Rule_Res_oneof_res::rule_delete_res(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_rule_delete_res(&mut self) -> Rule_Delete_Res {
        if self.has_rule_delete_res() {
            match self.res.take() {
                ::std::option::Option::Some(Rule_Res_oneof_res::rule_delete_res(v)) => v,
                _ => panic!(),
            }
        } else {
            Rule_Delete_Res::new()
        }
    }

    // .typedb.protocol.Rule.SetLabel.Res rule_set_label_res = 101;


    pub fn get_rule_set_label_res(&self) -> &Rule_SetLabel_Res {
        match self.res {
            ::std::option::Option::Some(Rule_Res_oneof_res::rule_set_label_res(ref v)) => v,
            _ => <Rule_SetLabel_Res as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_rule_set_label_res(&mut self) {
        self.res = ::std::option::Option::None;
    }

    pub fn has_rule_set_label_res(&self) -> bool {
        match self.res {
            ::std::option::Option::Some(Rule_Res_oneof_res::rule_set_label_res(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_rule_set_label_res(&mut self, v: Rule_SetLabel_Res) {
        self.res = ::std::option::Option::Some(Rule_Res_oneof_res::rule_set_label_res(v))
    }

    // Mutable pointer to the field.
    pub fn mut_rule_set_label_res(&mut self) -> &mut Rule_SetLabel_Res {
        if let ::std::option::Option::Some(Rule_Res_oneof_res::rule_set_label_res(_)) = self.res {
        } else {
            self.res = ::std::option::Option::Some(Rule_Res_oneof_res::rule_set_label_res(Rule_SetLabel_Res::new()));
        }
        match self.res {
            ::std::option::Option::Some(Rule_Res_oneof_res::rule_set_label_res(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_rule_set_label_res(&mut self) -> Rule_SetLabel_Res {
        if self.has_rule_set_label_res() {
            match self.res.take() {
                ::std::option::Option::Some(Rule_Res_oneof_res::rule_set_label_res(v)) => v,
                _ => panic!(),
            }
        } else {
            Rule_SetLabel_Res::new()
        }
    }
}

impl ::protobuf::Message for Rule_Res {
    fn is_initialized(&self) -> bool {
        if let Some(Rule_Res_oneof_res::rule_delete_res(ref v)) = self.res {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Rule_Res_oneof_res::rule_set_label_res(ref v)) = self.res {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                100 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.res = ::std::option::Option::Some(Rule_Res_oneof_res::rule_delete_res(is.read_message()?));
                },
                101 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.res = ::std::option::Option::Some(Rule_Res_oneof_res::rule_set_label_res(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.res {
            match v {
                &Rule_Res_oneof_res::rule_delete_res(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Rule_Res_oneof_res::rule_set_label_res(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.res {
            match v {
                &Rule_Res_oneof_res::rule_delete_res(ref v) => {
                    os.write_tag(100, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Rule_Res_oneof_res::rule_set_label_res(ref v) => {
                    os.write_tag(101, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Rule_Res {
        Rule_Res::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Rule_Delete_Res>(
                "rule_delete_res",
                Rule_Res::has_rule_delete_res,
                Rule_Res::get_rule_delete_res,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Rule_SetLabel_Res>(
                "rule_set_label_res",
                Rule_Res::has_rule_set_label_res,
                Rule_Res::get_rule_set_label_res,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Rule_Res>(
                "Rule.Res",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Rule_Res {
        static instance: ::protobuf::rt::LazyV2<Rule_Res> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Rule_Res::new)
    }
}

impl ::protobuf::Clear for Rule_Res {
    fn clear(&mut self) {
        self.res = ::std::option::Option::None;
        self.res = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Rule_Res {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Rule_Res {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Rule_Delete {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Rule_Delete {
    fn default() -> &'a Rule_Delete {
        <Rule_Delete as ::protobuf::Message>::default_instance()
    }
}

impl Rule_Delete {
    pub fn new() -> Rule_Delete {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for Rule_Delete {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Rule_Delete {
        Rule_Delete::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Rule_Delete>(
                "Rule.Delete",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Rule_Delete {
        static instance: ::protobuf::rt::LazyV2<Rule_Delete> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Rule_Delete::new)
    }
}

impl ::protobuf::Clear for Rule_Delete {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Rule_Delete {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Rule_Delete {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Rule_Delete_Req {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Rule_Delete_Req {
    fn default() -> &'a Rule_Delete_Req {
        <Rule_Delete_Req as ::protobuf::Message>::default_instance()
    }
}

impl Rule_Delete_Req {
    pub fn new() -> Rule_Delete_Req {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for Rule_Delete_Req {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Rule_Delete_Req {
        Rule_Delete_Req::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Rule_Delete_Req>(
                "Rule.Delete.Req",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Rule_Delete_Req {
        static instance: ::protobuf::rt::LazyV2<Rule_Delete_Req> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Rule_Delete_Req::new)
    }
}

impl ::protobuf::Clear for Rule_Delete_Req {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Rule_Delete_Req {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Rule_Delete_Req {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Rule_Delete_Res {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Rule_Delete_Res {
    fn default() -> &'a Rule_Delete_Res {
        <Rule_Delete_Res as ::protobuf::Message>::default_instance()
    }
}

impl Rule_Delete_Res {
    pub fn new() -> Rule_Delete_Res {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for Rule_Delete_Res {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Rule_Delete_Res {
        Rule_Delete_Res::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Rule_Delete_Res>(
                "Rule.Delete.Res",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Rule_Delete_Res {
        static instance: ::protobuf::rt::LazyV2<Rule_Delete_Res> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Rule_Delete_Res::new)
    }
}

impl ::protobuf::Clear for Rule_Delete_Res {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Rule_Delete_Res {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Rule_Delete_Res {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Rule_SetLabel {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Rule_SetLabel {
    fn default() -> &'a Rule_SetLabel {
        <Rule_SetLabel as ::protobuf::Message>::default_instance()
    }
}

impl Rule_SetLabel {
    pub fn new() -> Rule_SetLabel {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for Rule_SetLabel {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Rule_SetLabel {
        Rule_SetLabel::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Rule_SetLabel>(
                "Rule.SetLabel",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Rule_SetLabel {
        static instance: ::protobuf::rt::LazyV2<Rule_SetLabel> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Rule_SetLabel::new)
    }
}

impl ::protobuf::Clear for Rule_SetLabel {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Rule_SetLabel {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Rule_SetLabel {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Rule_SetLabel_Req {
    // message fields
    pub label: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Rule_SetLabel_Req {
    fn default() -> &'a Rule_SetLabel_Req {
        <Rule_SetLabel_Req as ::protobuf::Message>::default_instance()
    }
}

impl Rule_SetLabel_Req {
    pub fn new() -> Rule_SetLabel_Req {
        ::std::default::Default::default()
    }

    // string label = 1;


    pub fn get_label(&self) -> &str {
        &self.label
    }
    pub fn clear_label(&mut self) {
        self.label.clear();
    }

    // Param is passed by value, moved
    pub fn set_label(&mut self, v: ::std::string::String) {
        self.label = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_label(&mut self) -> &mut ::std::string::String {
        &mut self.label
    }

    // Take field
    pub fn take_label(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.label, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Rule_SetLabel_Req {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.label)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.label.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.label);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.label.is_empty() {
            os.write_string(1, &self.label)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Rule_SetLabel_Req {
        Rule_SetLabel_Req::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "label",
                |m: &Rule_SetLabel_Req| { &m.label },
                |m: &mut Rule_SetLabel_Req| { &mut m.label },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Rule_SetLabel_Req>(
                "Rule.SetLabel.Req",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Rule_SetLabel_Req {
        static instance: ::protobuf::rt::LazyV2<Rule_SetLabel_Req> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Rule_SetLabel_Req::new)
    }
}

impl ::protobuf::Clear for Rule_SetLabel_Req {
    fn clear(&mut self) {
        self.label.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Rule_SetLabel_Req {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Rule_SetLabel_Req {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Rule_SetLabel_Res {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Rule_SetLabel_Res {
    fn default() -> &'a Rule_SetLabel_Res {
        <Rule_SetLabel_Res as ::protobuf::Message>::default_instance()
    }
}

impl Rule_SetLabel_Res {
    pub fn new() -> Rule_SetLabel_Res {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for Rule_SetLabel_Res {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Rule_SetLabel_Res {
        Rule_SetLabel_Res::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Rule_SetLabel_Res>(
                "Rule.SetLabel.Res",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Rule_SetLabel_Res {
        static instance: ::protobuf::rt::LazyV2<Rule_SetLabel_Res> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Rule_SetLabel_Res::new)
    }
}

impl ::protobuf::Clear for Rule_SetLabel_Res {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Rule_SetLabel_Res {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Rule_SetLabel_Res {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Explanation {
    // message fields
    pub rule: ::protobuf::SingularPtrField<Rule>,
    pub var_mapping: ::std::collections::HashMap<::std::string::String, Explanation_VarList>,
    pub condition: ::protobuf::SingularPtrField<super::answer::ConceptMap>,
    pub conclusion: ::protobuf::SingularPtrField<super::answer::ConceptMap>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Explanation {
    fn default() -> &'a Explanation {
        <Explanation as ::protobuf::Message>::default_instance()
    }
}

impl Explanation {
    pub fn new() -> Explanation {
        ::std::default::Default::default()
    }

    // .typedb.protocol.Rule rule = 1;


    pub fn get_rule(&self) -> &Rule {
        self.rule.as_ref().unwrap_or_else(|| <Rule as ::protobuf::Message>::default_instance())
    }
    pub fn clear_rule(&mut self) {
        self.rule.clear();
    }

    pub fn has_rule(&self) -> bool {
        self.rule.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rule(&mut self, v: Rule) {
        self.rule = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rule(&mut self) -> &mut Rule {
        if self.rule.is_none() {
            self.rule.set_default();
        }
        self.rule.as_mut().unwrap()
    }

    // Take field
    pub fn take_rule(&mut self) -> Rule {
        self.rule.take().unwrap_or_else(|| Rule::new())
    }

    // repeated .typedb.protocol.Explanation.VarMappingEntry var_mapping = 2;


    pub fn get_var_mapping(&self) -> &::std::collections::HashMap<::std::string::String, Explanation_VarList> {
        &self.var_mapping
    }
    pub fn clear_var_mapping(&mut self) {
        self.var_mapping.clear();
    }

    // Param is passed by value, moved
    pub fn set_var_mapping(&mut self, v: ::std::collections::HashMap<::std::string::String, Explanation_VarList>) {
        self.var_mapping = v;
    }

    // Mutable pointer to the field.
    pub fn mut_var_mapping(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, Explanation_VarList> {
        &mut self.var_mapping
    }

    // Take field
    pub fn take_var_mapping(&mut self) -> ::std::collections::HashMap<::std::string::String, Explanation_VarList> {
        ::std::mem::replace(&mut self.var_mapping, ::std::collections::HashMap::new())
    }

    // .typedb.protocol.ConceptMap condition = 3;


    pub fn get_condition(&self) -> &super::answer::ConceptMap {
        self.condition.as_ref().unwrap_or_else(|| <super::answer::ConceptMap as ::protobuf::Message>::default_instance())
    }
    pub fn clear_condition(&mut self) {
        self.condition.clear();
    }

    pub fn has_condition(&self) -> bool {
        self.condition.is_some()
    }

    // Param is passed by value, moved
    pub fn set_condition(&mut self, v: super::answer::ConceptMap) {
        self.condition = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_condition(&mut self) -> &mut super::answer::ConceptMap {
        if self.condition.is_none() {
            self.condition.set_default();
        }
        self.condition.as_mut().unwrap()
    }

    // Take field
    pub fn take_condition(&mut self) -> super::answer::ConceptMap {
        self.condition.take().unwrap_or_else(|| super::answer::ConceptMap::new())
    }

    // .typedb.protocol.ConceptMap conclusion = 4;


    pub fn get_conclusion(&self) -> &super::answer::ConceptMap {
        self.conclusion.as_ref().unwrap_or_else(|| <super::answer::ConceptMap as ::protobuf::Message>::default_instance())
    }
    pub fn clear_conclusion(&mut self) {
        self.conclusion.clear();
    }

    pub fn has_conclusion(&self) -> bool {
        self.conclusion.is_some()
    }

    // Param is passed by value, moved
    pub fn set_conclusion(&mut self, v: super::answer::ConceptMap) {
        self.conclusion = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_conclusion(&mut self) -> &mut super::answer::ConceptMap {
        if self.conclusion.is_none() {
            self.conclusion.set_default();
        }
        self.conclusion.as_mut().unwrap()
    }

    // Take field
    pub fn take_conclusion(&mut self) -> super::answer::ConceptMap {
        self.conclusion.take().unwrap_or_else(|| super::answer::ConceptMap::new())
    }
}

impl ::protobuf::Message for Explanation {
    fn is_initialized(&self) -> bool {
        for v in &self.rule {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.condition {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.conclusion {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.rule)?;
                },
                2 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Explanation_VarList>>(wire_type, is, &mut self.var_mapping)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.condition)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.conclusion)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.rule.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Explanation_VarList>>(2, &self.var_mapping);
        if let Some(ref v) = self.condition.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.conclusion.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.rule.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Explanation_VarList>>(2, &self.var_mapping, os)?;
        if let Some(ref v) = self.condition.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.conclusion.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Explanation {
        Explanation::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Rule>>(
                "rule",
                |m: &Explanation| { &m.rule },
                |m: &mut Explanation| { &mut m.rule },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Explanation_VarList>>(
                "var_mapping",
                |m: &Explanation| { &m.var_mapping },
                |m: &mut Explanation| { &mut m.var_mapping },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::answer::ConceptMap>>(
                "condition",
                |m: &Explanation| { &m.condition },
                |m: &mut Explanation| { &mut m.condition },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::answer::ConceptMap>>(
                "conclusion",
                |m: &Explanation| { &m.conclusion },
                |m: &mut Explanation| { &mut m.conclusion },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Explanation>(
                "Explanation",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Explanation {
        static instance: ::protobuf::rt::LazyV2<Explanation> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Explanation::new)
    }
}

impl ::protobuf::Clear for Explanation {
    fn clear(&mut self) {
        self.rule.clear();
        self.var_mapping.clear();
        self.condition.clear();
        self.conclusion.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Explanation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Explanation {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Explanation_VarList {
    // message fields
    pub vars: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Explanation_VarList {
    fn default() -> &'a Explanation_VarList {
        <Explanation_VarList as ::protobuf::Message>::default_instance()
    }
}

impl Explanation_VarList {
    pub fn new() -> Explanation_VarList {
        ::std::default::Default::default()
    }

    // repeated string vars = 1;


    pub fn get_vars(&self) -> &[::std::string::String] {
        &self.vars
    }
    pub fn clear_vars(&mut self) {
        self.vars.clear();
    }

    // Param is passed by value, moved
    pub fn set_vars(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.vars = v;
    }

    // Mutable pointer to the field.
    pub fn mut_vars(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.vars
    }

    // Take field
    pub fn take_vars(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.vars, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Explanation_VarList {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.vars)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.vars {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.vars {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Explanation_VarList {
        Explanation_VarList::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "vars",
                |m: &Explanation_VarList| { &m.vars },
                |m: &mut Explanation_VarList| { &mut m.vars },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Explanation_VarList>(
                "Explanation.VarList",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Explanation_VarList {
        static instance: ::protobuf::rt::LazyV2<Explanation_VarList> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Explanation_VarList::new)
    }
}

impl ::protobuf::Clear for Explanation_VarList {
    fn clear(&mut self) {
        self.vars.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Explanation_VarList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Explanation_VarList {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12common/logic.proto\x12\x0ftypedb.protocol\x1a\x13common/answer.pro\
    to\"\xd3\x06\n\x0cLogicManager\x1a\xfc\x01\n\x03Req\x12M\n\x0cget_rule_r\
    eq\x18\x01\x20\x01(\x0b2).typedb.protocol.LogicManager.GetRule.ReqH\0R\n\
    getRuleReq\x12M\n\x0cput_rule_req\x18\x02\x20\x01(\x0b2).typedb.protocol\
    .LogicManager.PutRule.ReqH\0R\nputRuleReq\x12P\n\rget_rules_req\x18\x03\
    \x20\x01(\x0b2*.typedb.protocol.LogicManager.GetRules.ReqH\0R\x0bgetRule\
    sReqB\x05\n\x03req\x1a\xaa\x01\n\x03Res\x12M\n\x0cget_rule_res\x18\x01\
    \x20\x01(\x0b2).typedb.protocol.LogicManager.GetRule.ResH\0R\ngetRuleRes\
    \x12M\n\x0cput_rule_res\x18\x02\x20\x01(\x0b2).typedb.protocol.LogicMana\
    ger.PutRule.ResH\0R\nputRuleResB\x05\n\x03res\x1af\n\x07ResPart\x12[\n\
    \x12get_rules_res_part\x18\x01\x20\x01(\x0b2..typedb.protocol.LogicManag\
    er.GetRules.ResPartR\x0fgetRulesResPart\x1aa\n\x07GetRule\x1a\x1b\n\x03R\
    eq\x12\x14\n\x05label\x18\x01\x20\x01(\tR\x05label\x1a9\n\x03Res\x12+\n\
    \x04rule\x18\x01\x20\x01(\x0b2\x15.typedb.protocol.RuleH\0R\x04ruleB\x05\
    \n\x03res\x1a\x80\x01\n\x07PutRule\x1aC\n\x03Req\x12\x14\n\x05label\x18\
    \x01\x20\x01(\tR\x05label\x12\x12\n\x04when\x18\x02\x20\x01(\tR\x04when\
    \x12\x12\n\x04then\x18\x03\x20\x01(\tR\x04then\x1a0\n\x03Res\x12)\n\x04r\
    ule\x18\x01\x20\x01(\x0b2\x15.typedb.protocol.RuleR\x04rule\x1aI\n\x08Ge\
    tRules\x1a\x05\n\x03Req\x1a6\n\x07ResPart\x12+\n\x05rules\x18\x01\x20\
    \x03(\x0b2\x15.typedb.protocol.RuleR\x05rules\"\xfe\x03\n\x04Rule\x12\
    \x14\n\x05label\x18\x01\x20\x01(\tR\x05label\x12\x12\n\x04when\x18\x02\
    \x20\x01(\tR\x04when\x12\x12\n\x04then\x18\x03\x20\x01(\tR\x04then\x1a\
    \xc1\x01\n\x03Req\x12\x14\n\x05label\x18\x01\x20\x01(\tR\x05label\x12J\n\
    \x0frule_delete_req\x18d\x20\x01(\x0b2\x20.typedb.protocol.Rule.Delete.R\
    eqH\0R\rruleDeleteReq\x12Q\n\x12rule_set_label_req\x18e\x20\x01(\x0b2\".\
    typedb.protocol.Rule.SetLabel.ReqH\0R\x0fruleSetLabelReqB\x05\n\x03req\
    \x1a\xab\x01\n\x03Res\x12J\n\x0frule_delete_res\x18d\x20\x01(\x0b2\x20.t\
    ypedb.protocol.Rule.Delete.ResH\0R\rruleDeleteRes\x12Q\n\x12rule_set_lab\
    el_res\x18e\x20\x01(\x0b2\".typedb.protocol.Rule.SetLabel.ResH\0R\x0frul\
    eSetLabelResB\x05\n\x03res\x1a\x16\n\x06Delete\x1a\x05\n\x03Req\x1a\x05\
    \n\x03Res\x1a.\n\x08SetLabel\x1a\x1b\n\x03Req\x12\x14\n\x05label\x18\x01\
    \x20\x01(\tR\x05label\x1a\x05\n\x03Res\"\x83\x03\n\x0bExplanation\x12)\n\
    \x04rule\x18\x01\x20\x01(\x0b2\x15.typedb.protocol.RuleR\x04rule\x12M\n\
    \x0bvar_mapping\x18\x02\x20\x03(\x0b2,.typedb.protocol.Explanation.VarMa\
    ppingEntryR\nvarMapping\x129\n\tcondition\x18\x03\x20\x01(\x0b2\x1b.type\
    db.protocol.ConceptMapR\tcondition\x12;\n\nconclusion\x18\x04\x20\x01(\
    \x0b2\x1b.typedb.protocol.ConceptMapR\nconclusion\x1ac\n\x0fVarMappingEn\
    try\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12:\n\x05value\x18\x02\
    \x20\x01(\x0b2$.typedb.protocol.Explanation.VarListR\x05value:\x028\x01\
    \x1a\x1d\n\x07VarList\x12\x12\n\x04vars\x18\x01\x20\x03(\tR\x04varsB)\n\
    \x1bcom.vaticle.typedb.protocolB\nLogicProtob\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
