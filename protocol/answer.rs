/*
 * Copyright (C) 2021 Vaticle
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// This file is generated by rust-protobuf 2.8.2. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `common/answer.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_2;

#[derive(PartialEq,Clone,Default)]
pub struct ConceptMap {
    // message fields
    pub map: ::std::collections::HashMap<::std::string::String, super::concept::Concept>,
    pub explainables: ::protobuf::SingularPtrField<Explainables>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConceptMap {
    fn default() -> &'a ConceptMap {
        <ConceptMap as ::protobuf::Message>::default_instance()
    }
}

impl ConceptMap {
    pub fn new() -> ConceptMap {
        ::std::default::Default::default()
    }

    // repeated .typedb.protocol.ConceptMap.MapEntry map = 1;


    pub fn get_map(&self) -> &::std::collections::HashMap<::std::string::String, super::concept::Concept> {
        &self.map
    }
    pub fn clear_map(&mut self) {
        self.map.clear();
    }

    // Param is passed by value, moved
    pub fn set_map(&mut self, v: ::std::collections::HashMap<::std::string::String, super::concept::Concept>) {
        self.map = v;
    }

    // Mutable pointer to the field.
    pub fn mut_map(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, super::concept::Concept> {
        &mut self.map
    }

    // Take field
    pub fn take_map(&mut self) -> ::std::collections::HashMap<::std::string::String, super::concept::Concept> {
        ::std::mem::replace(&mut self.map, ::std::collections::HashMap::new())
    }

    // .typedb.protocol.Explainables explainables = 2;


    pub fn get_explainables(&self) -> &Explainables {
        self.explainables.as_ref().unwrap_or_else(|| Explainables::default_instance())
    }
    pub fn clear_explainables(&mut self) {
        self.explainables.clear();
    }

    pub fn has_explainables(&self) -> bool {
        self.explainables.is_some()
    }

    // Param is passed by value, moved
    pub fn set_explainables(&mut self, v: Explainables) {
        self.explainables = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_explainables(&mut self) -> &mut Explainables {
        if self.explainables.is_none() {
            self.explainables.set_default();
        }
        self.explainables.as_mut().unwrap()
    }

    // Take field
    pub fn take_explainables(&mut self) -> Explainables {
        self.explainables.take().unwrap_or_else(|| Explainables::new())
    }
}

impl ::protobuf::Message for ConceptMap {
    fn is_initialized(&self) -> bool {
        for v in &self.explainables {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<super::concept::Concept>>(wire_type, is, &mut self.map)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.explainables)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<super::concept::Concept>>(1, &self.map);
        if let Some(ref v) = self.explainables.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<super::concept::Concept>>(1, &self.map, os)?;
        if let Some(ref v) = self.explainables.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConceptMap {
        ConceptMap::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<super::concept::Concept>>(
                    "map",
                    |m: &ConceptMap| { &m.map },
                    |m: &mut ConceptMap| { &mut m.map },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Explainables>>(
                    "explainables",
                    |m: &ConceptMap| { &m.explainables },
                    |m: &mut ConceptMap| { &mut m.explainables },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ConceptMap>(
                    "ConceptMap",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ConceptMap {
        static mut instance: ::protobuf::lazy::Lazy<ConceptMap> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ConceptMap,
        };
        unsafe {
            instance.get(ConceptMap::new)
        }
    }
}

impl ::protobuf::Clear for ConceptMap {
    fn clear(&mut self) {
        self.map.clear();
        self.explainables.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConceptMap {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConceptMap {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Explainables {
    // message fields
    pub relations: ::std::collections::HashMap<::std::string::String, Explainable>,
    pub attributes: ::std::collections::HashMap<::std::string::String, Explainable>,
    pub ownerships: ::std::collections::HashMap<::std::string::String, Explainables_Owned>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Explainables {
    fn default() -> &'a Explainables {
        <Explainables as ::protobuf::Message>::default_instance()
    }
}

impl Explainables {
    pub fn new() -> Explainables {
        ::std::default::Default::default()
    }

    // repeated .typedb.protocol.Explainables.RelationsEntry relations = 1;


    pub fn get_relations(&self) -> &::std::collections::HashMap<::std::string::String, Explainable> {
        &self.relations
    }
    pub fn clear_relations(&mut self) {
        self.relations.clear();
    }

    // Param is passed by value, moved
    pub fn set_relations(&mut self, v: ::std::collections::HashMap<::std::string::String, Explainable>) {
        self.relations = v;
    }

    // Mutable pointer to the field.
    pub fn mut_relations(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, Explainable> {
        &mut self.relations
    }

    // Take field
    pub fn take_relations(&mut self) -> ::std::collections::HashMap<::std::string::String, Explainable> {
        ::std::mem::replace(&mut self.relations, ::std::collections::HashMap::new())
    }

    // repeated .typedb.protocol.Explainables.AttributesEntry attributes = 2;


    pub fn get_attributes(&self) -> &::std::collections::HashMap<::std::string::String, Explainable> {
        &self.attributes
    }
    pub fn clear_attributes(&mut self) {
        self.attributes.clear();
    }

    // Param is passed by value, moved
    pub fn set_attributes(&mut self, v: ::std::collections::HashMap<::std::string::String, Explainable>) {
        self.attributes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_attributes(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, Explainable> {
        &mut self.attributes
    }

    // Take field
    pub fn take_attributes(&mut self) -> ::std::collections::HashMap<::std::string::String, Explainable> {
        ::std::mem::replace(&mut self.attributes, ::std::collections::HashMap::new())
    }

    // repeated .typedb.protocol.Explainables.OwnershipsEntry ownerships = 3;


    pub fn get_ownerships(&self) -> &::std::collections::HashMap<::std::string::String, Explainables_Owned> {
        &self.ownerships
    }
    pub fn clear_ownerships(&mut self) {
        self.ownerships.clear();
    }

    // Param is passed by value, moved
    pub fn set_ownerships(&mut self, v: ::std::collections::HashMap<::std::string::String, Explainables_Owned>) {
        self.ownerships = v;
    }

    // Mutable pointer to the field.
    pub fn mut_ownerships(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, Explainables_Owned> {
        &mut self.ownerships
    }

    // Take field
    pub fn take_ownerships(&mut self) -> ::std::collections::HashMap<::std::string::String, Explainables_Owned> {
        ::std::mem::replace(&mut self.ownerships, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for Explainables {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Explainable>>(wire_type, is, &mut self.relations)?;
                },
                2 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Explainable>>(wire_type, is, &mut self.attributes)?;
                },
                3 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Explainables_Owned>>(wire_type, is, &mut self.ownerships)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Explainable>>(1, &self.relations);
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Explainable>>(2, &self.attributes);
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Explainables_Owned>>(3, &self.ownerships);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Explainable>>(1, &self.relations, os)?;
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Explainable>>(2, &self.attributes, os)?;
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Explainables_Owned>>(3, &self.ownerships, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Explainables {
        Explainables::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Explainable>>(
                    "relations",
                    |m: &Explainables| { &m.relations },
                    |m: &mut Explainables| { &mut m.relations },
                ));
                fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Explainable>>(
                    "attributes",
                    |m: &Explainables| { &m.attributes },
                    |m: &mut Explainables| { &mut m.attributes },
                ));
                fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Explainables_Owned>>(
                    "ownerships",
                    |m: &Explainables| { &m.ownerships },
                    |m: &mut Explainables| { &mut m.ownerships },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Explainables>(
                    "Explainables",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Explainables {
        static mut instance: ::protobuf::lazy::Lazy<Explainables> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Explainables,
        };
        unsafe {
            instance.get(Explainables::new)
        }
    }
}

impl ::protobuf::Clear for Explainables {
    fn clear(&mut self) {
        self.relations.clear();
        self.attributes.clear();
        self.ownerships.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Explainables {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Explainables {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Explainables_Owned {
    // message fields
    pub owned: ::std::collections::HashMap<::std::string::String, Explainable>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Explainables_Owned {
    fn default() -> &'a Explainables_Owned {
        <Explainables_Owned as ::protobuf::Message>::default_instance()
    }
}

impl Explainables_Owned {
    pub fn new() -> Explainables_Owned {
        ::std::default::Default::default()
    }

    // repeated .typedb.protocol.Explainables.Owned.OwnedEntry owned = 1;


    pub fn get_owned(&self) -> &::std::collections::HashMap<::std::string::String, Explainable> {
        &self.owned
    }
    pub fn clear_owned(&mut self) {
        self.owned.clear();
    }

    // Param is passed by value, moved
    pub fn set_owned(&mut self, v: ::std::collections::HashMap<::std::string::String, Explainable>) {
        self.owned = v;
    }

    // Mutable pointer to the field.
    pub fn mut_owned(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, Explainable> {
        &mut self.owned
    }

    // Take field
    pub fn take_owned(&mut self) -> ::std::collections::HashMap<::std::string::String, Explainable> {
        ::std::mem::replace(&mut self.owned, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for Explainables_Owned {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Explainable>>(wire_type, is, &mut self.owned)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Explainable>>(1, &self.owned);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Explainable>>(1, &self.owned, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Explainables_Owned {
        Explainables_Owned::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Explainable>>(
                    "owned",
                    |m: &Explainables_Owned| { &m.owned },
                    |m: &mut Explainables_Owned| { &mut m.owned },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Explainables_Owned>(
                    "Explainables_Owned",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Explainables_Owned {
        static mut instance: ::protobuf::lazy::Lazy<Explainables_Owned> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Explainables_Owned,
        };
        unsafe {
            instance.get(Explainables_Owned::new)
        }
    }
}

impl ::protobuf::Clear for Explainables_Owned {
    fn clear(&mut self) {
        self.owned.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Explainables_Owned {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Explainables_Owned {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Explainable {
    // message fields
    pub conjunction: ::std::string::String,
    pub id: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Explainable {
    fn default() -> &'a Explainable {
        <Explainable as ::protobuf::Message>::default_instance()
    }
}

impl Explainable {
    pub fn new() -> Explainable {
        ::std::default::Default::default()
    }

    // string conjunction = 1;


    pub fn get_conjunction(&self) -> &str {
        &self.conjunction
    }
    pub fn clear_conjunction(&mut self) {
        self.conjunction.clear();
    }

    // Param is passed by value, moved
    pub fn set_conjunction(&mut self, v: ::std::string::String) {
        self.conjunction = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_conjunction(&mut self) -> &mut ::std::string::String {
        &mut self.conjunction
    }

    // Take field
    pub fn take_conjunction(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.conjunction, ::std::string::String::new())
    }

    // int64 id = 2;


    pub fn get_id(&self) -> i64 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: i64) {
        self.id = v;
    }
}

impl ::protobuf::Message for Explainable {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.conjunction)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.conjunction.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.conjunction);
        }
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.conjunction.is_empty() {
            os.write_string(1, &self.conjunction)?;
        }
        if self.id != 0 {
            os.write_int64(2, self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Explainable {
        Explainable::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "conjunction",
                    |m: &Explainable| { &m.conjunction },
                    |m: &mut Explainable| { &mut m.conjunction },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "id",
                    |m: &Explainable| { &m.id },
                    |m: &mut Explainable| { &mut m.id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Explainable>(
                    "Explainable",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Explainable {
        static mut instance: ::protobuf::lazy::Lazy<Explainable> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Explainable,
        };
        unsafe {
            instance.get(Explainable::new)
        }
    }
}

impl ::protobuf::Clear for Explainable {
    fn clear(&mut self) {
        self.conjunction.clear();
        self.id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Explainable {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Explainable {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConceptMapGroup {
    // message fields
    pub owner: ::protobuf::SingularPtrField<super::concept::Concept>,
    pub concept_maps: ::protobuf::RepeatedField<ConceptMap>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConceptMapGroup {
    fn default() -> &'a ConceptMapGroup {
        <ConceptMapGroup as ::protobuf::Message>::default_instance()
    }
}

impl ConceptMapGroup {
    pub fn new() -> ConceptMapGroup {
        ::std::default::Default::default()
    }

    // .typedb.protocol.Concept owner = 1;


    pub fn get_owner(&self) -> &super::concept::Concept {
        self.owner.as_ref().unwrap_or_else(|| super::concept::Concept::default_instance())
    }
    pub fn clear_owner(&mut self) {
        self.owner.clear();
    }

    pub fn has_owner(&self) -> bool {
        self.owner.is_some()
    }

    // Param is passed by value, moved
    pub fn set_owner(&mut self, v: super::concept::Concept) {
        self.owner = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_owner(&mut self) -> &mut super::concept::Concept {
        if self.owner.is_none() {
            self.owner.set_default();
        }
        self.owner.as_mut().unwrap()
    }

    // Take field
    pub fn take_owner(&mut self) -> super::concept::Concept {
        self.owner.take().unwrap_or_else(|| super::concept::Concept::new())
    }

    // repeated .typedb.protocol.ConceptMap concept_maps = 2;


    pub fn get_concept_maps(&self) -> &[ConceptMap] {
        &self.concept_maps
    }
    pub fn clear_concept_maps(&mut self) {
        self.concept_maps.clear();
    }

    // Param is passed by value, moved
    pub fn set_concept_maps(&mut self, v: ::protobuf::RepeatedField<ConceptMap>) {
        self.concept_maps = v;
    }

    // Mutable pointer to the field.
    pub fn mut_concept_maps(&mut self) -> &mut ::protobuf::RepeatedField<ConceptMap> {
        &mut self.concept_maps
    }

    // Take field
    pub fn take_concept_maps(&mut self) -> ::protobuf::RepeatedField<ConceptMap> {
        ::std::mem::replace(&mut self.concept_maps, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ConceptMapGroup {
    fn is_initialized(&self) -> bool {
        for v in &self.owner {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.concept_maps {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.owner)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.concept_maps)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.owner.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.concept_maps {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.owner.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.concept_maps {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConceptMapGroup {
        ConceptMapGroup::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::concept::Concept>>(
                    "owner",
                    |m: &ConceptMapGroup| { &m.owner },
                    |m: &mut ConceptMapGroup| { &mut m.owner },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ConceptMap>>(
                    "concept_maps",
                    |m: &ConceptMapGroup| { &m.concept_maps },
                    |m: &mut ConceptMapGroup| { &mut m.concept_maps },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ConceptMapGroup>(
                    "ConceptMapGroup",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ConceptMapGroup {
        static mut instance: ::protobuf::lazy::Lazy<ConceptMapGroup> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ConceptMapGroup,
        };
        unsafe {
            instance.get(ConceptMapGroup::new)
        }
    }
}

impl ::protobuf::Clear for ConceptMapGroup {
    fn clear(&mut self) {
        self.owner.clear();
        self.concept_maps.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConceptMapGroup {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConceptMapGroup {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Numeric {
    // message oneof groups
    pub value: ::std::option::Option<Numeric_oneof_value>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Numeric {
    fn default() -> &'a Numeric {
        <Numeric as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Numeric_oneof_value {
    long_value(i64),
    double_value(f64),
    nan(bool),
}

impl Numeric {
    pub fn new() -> Numeric {
        ::std::default::Default::default()
    }

    // int64 long_value = 1;


    pub fn get_long_value(&self) -> i64 {
        match self.value {
            ::std::option::Option::Some(Numeric_oneof_value::long_value(v)) => v,
            _ => 0,
        }
    }
    pub fn clear_long_value(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_long_value(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(Numeric_oneof_value::long_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_long_value(&mut self, v: i64) {
        self.value = ::std::option::Option::Some(Numeric_oneof_value::long_value(v))
    }

    // double double_value = 2;


    pub fn get_double_value(&self) -> f64 {
        match self.value {
            ::std::option::Option::Some(Numeric_oneof_value::double_value(v)) => v,
            _ => 0.,
        }
    }
    pub fn clear_double_value(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_double_value(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(Numeric_oneof_value::double_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_double_value(&mut self, v: f64) {
        self.value = ::std::option::Option::Some(Numeric_oneof_value::double_value(v))
    }

    // bool nan = 3;


    pub fn get_nan(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(Numeric_oneof_value::nan(v)) => v,
            _ => false,
        }
    }
    pub fn clear_nan(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_nan(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(Numeric_oneof_value::nan(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_nan(&mut self, v: bool) {
        self.value = ::std::option::Option::Some(Numeric_oneof_value::nan(v))
    }
}

impl ::protobuf::Message for Numeric {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value = ::std::option::Option::Some(Numeric_oneof_value::long_value(is.read_int64()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value = ::std::option::Option::Some(Numeric_oneof_value::double_value(is.read_double()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value = ::std::option::Option::Some(Numeric_oneof_value::nan(is.read_bool()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.value {
            match v {
                &Numeric_oneof_value::long_value(v) => {
                    my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
                },
                &Numeric_oneof_value::double_value(v) => {
                    my_size += 9;
                },
                &Numeric_oneof_value::nan(v) => {
                    my_size += 2;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.value {
            match v {
                &Numeric_oneof_value::long_value(v) => {
                    os.write_int64(1, v)?;
                },
                &Numeric_oneof_value::double_value(v) => {
                    os.write_double(2, v)?;
                },
                &Numeric_oneof_value::nan(v) => {
                    os.write_bool(3, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Numeric {
        Numeric::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_i64_accessor::<_>(
                    "long_value",
                    Numeric::has_long_value,
                    Numeric::get_long_value,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_f64_accessor::<_>(
                    "double_value",
                    Numeric::has_double_value,
                    Numeric::get_double_value,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor::<_>(
                    "nan",
                    Numeric::has_nan,
                    Numeric::get_nan,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Numeric>(
                    "Numeric",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Numeric {
        static mut instance: ::protobuf::lazy::Lazy<Numeric> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Numeric,
        };
        unsafe {
            instance.get(Numeric::new)
        }
    }
}

impl ::protobuf::Clear for Numeric {
    fn clear(&mut self) {
        self.value = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Numeric {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Numeric {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct NumericGroup {
    // message fields
    pub owner: ::protobuf::SingularPtrField<super::concept::Concept>,
    pub number: ::protobuf::SingularPtrField<Numeric>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a NumericGroup {
    fn default() -> &'a NumericGroup {
        <NumericGroup as ::protobuf::Message>::default_instance()
    }
}

impl NumericGroup {
    pub fn new() -> NumericGroup {
        ::std::default::Default::default()
    }

    // .typedb.protocol.Concept owner = 1;


    pub fn get_owner(&self) -> &super::concept::Concept {
        self.owner.as_ref().unwrap_or_else(|| super::concept::Concept::default_instance())
    }
    pub fn clear_owner(&mut self) {
        self.owner.clear();
    }

    pub fn has_owner(&self) -> bool {
        self.owner.is_some()
    }

    // Param is passed by value, moved
    pub fn set_owner(&mut self, v: super::concept::Concept) {
        self.owner = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_owner(&mut self) -> &mut super::concept::Concept {
        if self.owner.is_none() {
            self.owner.set_default();
        }
        self.owner.as_mut().unwrap()
    }

    // Take field
    pub fn take_owner(&mut self) -> super::concept::Concept {
        self.owner.take().unwrap_or_else(|| super::concept::Concept::new())
    }

    // .typedb.protocol.Numeric number = 2;


    pub fn get_number(&self) -> &Numeric {
        self.number.as_ref().unwrap_or_else(|| Numeric::default_instance())
    }
    pub fn clear_number(&mut self) {
        self.number.clear();
    }

    pub fn has_number(&self) -> bool {
        self.number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_number(&mut self, v: Numeric) {
        self.number = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_number(&mut self) -> &mut Numeric {
        if self.number.is_none() {
            self.number.set_default();
        }
        self.number.as_mut().unwrap()
    }

    // Take field
    pub fn take_number(&mut self) -> Numeric {
        self.number.take().unwrap_or_else(|| Numeric::new())
    }
}

impl ::protobuf::Message for NumericGroup {
    fn is_initialized(&self) -> bool {
        for v in &self.owner {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.number {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.owner)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.number)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.owner.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.number.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.owner.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.number.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> NumericGroup {
        NumericGroup::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::concept::Concept>>(
                    "owner",
                    |m: &NumericGroup| { &m.owner },
                    |m: &mut NumericGroup| { &mut m.owner },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Numeric>>(
                    "number",
                    |m: &NumericGroup| { &m.number },
                    |m: &mut NumericGroup| { &mut m.number },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<NumericGroup>(
                    "NumericGroup",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static NumericGroup {
        static mut instance: ::protobuf::lazy::Lazy<NumericGroup> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const NumericGroup,
        };
        unsafe {
            instance.get(NumericGroup::new)
        }
    }
}

impl ::protobuf::Clear for NumericGroup {
    fn clear(&mut self) {
        self.owner.clear();
        self.number.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for NumericGroup {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NumericGroup {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13common/answer.proto\x12\x0ftypedb.protocol\x1a\x14common/concept.p\
    roto\"\xd9\x01\n\nConceptMap\x126\n\x03map\x18\x01\x20\x03(\x0b2$.typedb\
    .protocol.ConceptMap.MapEntryR\x03map\x12A\n\x0cexplainables\x18\x02\x20\
    \x01(\x0b2\x1d.typedb.protocol.ExplainablesR\x0cexplainables\x1aP\n\x08M\
    apEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12.\n\x05value\x18\
    \x02\x20\x01(\x0b2\x18.typedb.protocol.ConceptR\x05value:\x028\x01\"\xbd\
    \x05\n\x0cExplainables\x12J\n\trelations\x18\x01\x20\x03(\x0b2,.typedb.p\
    rotocol.Explainables.RelationsEntryR\trelations\x12M\n\nattributes\x18\
    \x02\x20\x03(\x0b2-.typedb.protocol.Explainables.AttributesEntryR\nattri\
    butes\x12M\n\nownerships\x18\x03\x20\x03(\x0b2-.typedb.protocol.Explaina\
    bles.OwnershipsEntryR\nownerships\x1aZ\n\x0eRelationsEntry\x12\x10\n\x03\
    key\x18\x01\x20\x01(\tR\x03key\x122\n\x05value\x18\x02\x20\x01(\x0b2\x1c\
    .typedb.protocol.ExplainableR\x05value:\x028\x01\x1a[\n\x0fAttributesEnt\
    ry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x122\n\x05value\x18\x02\
    \x20\x01(\x0b2\x1c.typedb.protocol.ExplainableR\x05value:\x028\x01\x1ab\
    \n\x0fOwnershipsEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x129\n\
    \x05value\x18\x02\x20\x01(\x0b2#.typedb.protocol.Explainables.OwnedR\x05\
    value:\x028\x01\x1a\xa5\x01\n\x05Owned\x12D\n\x05owned\x18\x01\x20\x03(\
    \x0b2..typedb.protocol.Explainables.Owned.OwnedEntryR\x05owned\x1aV\n\nO\
    wnedEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x122\n\x05value\
    \x18\x02\x20\x01(\x0b2\x1c.typedb.protocol.ExplainableR\x05value:\x028\
    \x01\"?\n\x0bExplainable\x12\x20\n\x0bconjunction\x18\x01\x20\x01(\tR\
    \x0bconjunction\x12\x0e\n\x02id\x18\x02\x20\x01(\x03R\x02id\"\x81\x01\n\
    \x0fConceptMapGroup\x12.\n\x05owner\x18\x01\x20\x01(\x0b2\x18.typedb.pro\
    tocol.ConceptR\x05owner\x12>\n\x0cconcept_maps\x18\x02\x20\x03(\x0b2\x1b\
    .typedb.protocol.ConceptMapR\x0bconceptMaps\"l\n\x07Numeric\x12\x1f\n\nl\
    ong_value\x18\x01\x20\x01(\x03H\0R\tlongValue\x12#\n\x0cdouble_value\x18\
    \x02\x20\x01(\x01H\0R\x0bdoubleValue\x12\x12\n\x03nan\x18\x03\x20\x01(\
    \x08H\0R\x03nanB\x07\n\x05value\"p\n\x0cNumericGroup\x12.\n\x05owner\x18\
    \x01\x20\x01(\x0b2\x18.typedb.protocol.ConceptR\x05owner\x120\n\x06numbe\
    r\x18\x02\x20\x01(\x0b2\x18.typedb.protocol.NumericR\x06numberB*\n\x1bco\
    m.vaticle.typedb.protocolB\x0bAnswerProtob\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
