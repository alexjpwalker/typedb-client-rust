/*
 * Copyright (C) 2021 Vaticle
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// This file is generated by rust-protobuf 2.8.2. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `cluster/cluster_service.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_2;

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1dcluster/cluster_service.proto\x12\x0ftypedb.protocol\x1a\x1ccluste\
    r/cluster_server.proto\x1a\x1acluster/cluster_user.proto\x1a\x1ecluster/\
    cluster_database.proto2\xc7\x07\n\rTypeDBCluster\x12]\n\x0bservers_all\
    \x12&.typedb.protocol.ServerManager.All.Req\x1a&.typedb.protocol.ServerM\
    anager.All.Res\x12t\n\x0eusers_contains\x120.typedb.protocol.ClusterUser\
    Manager.Contains.Req\x1a0.typedb.protocol.ClusterUserManager.Contains.Re\
    s\x12n\n\x0cusers_create\x12..typedb.protocol.ClusterUserManager.Create.\
    Req\x1a..typedb.protocol.ClusterUserManager.Create.Res\x12e\n\tusers_all\
    \x12+.typedb.protocol.ClusterUserManager.All.Req\x1a+.typedb.protocol.Cl\
    usterUserManager.All.Res\x12e\n\ruser_password\x12).typedb.protocol.Clus\
    terUser.Password.Req\x1a).typedb.protocol.ClusterUser.Password.Res\x12\\\
    \n\nuser_token\x12&.typedb.protocol.ClusterUser.Token.Req\x1a&.typedb.pr\
    otocol.ClusterUser.Token.Res\x12_\n\x0buser_delete\x12'.typedb.protocol.\
    ClusterUser.Delete.Req\x1a'.typedb.protocol.ClusterUser.Delete.Res\x12q\
    \n\rdatabases_get\x12/.typedb.protocol.ClusterDatabaseManager.Get.Req\
    \x1a/.typedb.protocol.ClusterDatabaseManager.Get.Res\x12q\n\rdatabases_a\
    ll\x12/.typedb.protocol.ClusterDatabaseManager.All.Req\x1a/.typedb.proto\
    col.ClusterDatabaseManager.All.ResB5\n\x1bcom.vaticle.typedb.protocolB\
    \x13ClusterServiceProto\x88\x01\x01b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
